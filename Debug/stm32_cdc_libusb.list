
stm32_cdc_libusb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007998  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007be4  08007be4  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bec  08007bec  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf0  08007bf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08007bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a1c  2000014c  08007d40  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001b68  08007d40  00021b68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd2d  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ccc  00000000  00000000  0002fea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00032b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  000337d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029752  00000000  00000000  000342c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ad3  00000000  00000000  0005da12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f000e  00000000  00000000  0006e4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e4f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003284  00000000  00000000  0015e544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08007b78 	.word	0x08007b78

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08007b78 	.word	0x08007b78

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 f969 	bl	8000816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f806 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f872 	bl	8000630 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800054c:	f006 fc48 	bl	8006de0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x14>
	...

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2234      	movs	r2, #52	; 0x34
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f007 fa02 	bl	800796c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <SystemClock_Config+0xd4>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a2a      	ldr	r2, [pc, #168]	; (8000628 <SystemClock_Config+0xd4>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xd4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <SystemClock_Config+0xd8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a25      	ldr	r2, [pc, #148]	; (800062c <SystemClock_Config+0xd8>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005c0:	23d8      	movs	r3, #216	; 0xd8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005c8:	2309      	movs	r3, #9
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 ff65 	bl	80024a4 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005e0:	f000 f84a 	bl	8000678 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005e4:	f001 ff0e 	bl	8002404 <HAL_PWREx_EnableOverDrive>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ee:	f000 f843 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f2:	230f      	movs	r3, #15
 80005f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f6:	2302      	movs	r3, #2
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2107      	movs	r1, #7
 8000610:	4618      	mov	r0, r3
 8000612:	f002 f9f5 	bl	8002a00 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800061c:	f000 f82c 	bl	8000678 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_GPIO_Init+0x44>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <MX_GPIO_Init+0x44>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_GPIO_Init+0x44>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_GPIO_Init+0x44>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <MX_GPIO_Init+0x44>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_GPIO_Init+0x44>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x44>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_MspInit+0x44>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x44>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x44>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_MspInit+0x44>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6453      	str	r3, [r2, #68]	; 0x44
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MspInit+0x44>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f8ba 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <OTG_FS_IRQHandler+0x10>)
 8000726:	f000 fcfb 	bl	8001120 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20001650 	.word	0x20001650

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f007 f8c8 	bl	80078f8 <__errno>
 8000768:	4603      	mov	r3, r0
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20080000 	.word	0x20080000
 8000794:	00000400 	.word	0x00000400
 8000798:	20000168 	.word	0x20000168
 800079c:	20001b68 	.word	0x20001b68

080007a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007ca:	490e      	ldr	r1, [pc, #56]	; (8000804 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007e0:	4c0b      	ldr	r4, [pc, #44]	; (8000810 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007ee:	f7ff ffd7 	bl	80007a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f007 f887 	bl	8007904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff fea1 	bl	800053c <main>
  bx  lr    
 80007fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000808:	08007bf4 	.word	0x08007bf4
  ldr r2, =_sbss
 800080c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000810:	20001b68 	.word	0x20001b68

08000814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC_IRQHandler>

08000816 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081a:	2003      	movs	r0, #3
 800081c:	f000 f94c 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000820:	200f      	movs	r0, #15
 8000822:	f000 f805 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000826:	f7ff ff2d 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x54>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_InitTick+0x58>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f967 	bl	8000b22 <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e00e      	b.n	800087c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d80a      	bhi.n	800087a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f000 f92f 	bl	8000ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <HAL_InitTick+0x5c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x20>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_IncTick+0x24>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_IncTick+0x24>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008
 80008b4:	2000016c 	.word	0x2000016c

080008b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return uwTick;
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <HAL_GetTick+0x14>)
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	2000016c 	.word	0x2000016c

080008d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d8:	f7ff ffee 	bl	80008b8 <HAL_GetTick>
 80008dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e8:	d005      	beq.n	80008f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_Delay+0x44>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008f6:	bf00      	nop
 80008f8:	f7ff ffde 	bl	80008b8 <HAL_GetTick>
 80008fc:	4602      	mov	r2, r0
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	429a      	cmp	r2, r3
 8000906:	d8f7      	bhi.n	80008f8 <HAL_Delay+0x28>
  {
  }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000008 	.word	0x20000008

08000918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <__NVIC_SetPriorityGrouping+0x40>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000934:	4013      	ands	r3, r2
 8000936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	4313      	orrs	r3, r2
 8000944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <__NVIC_SetPriorityGrouping+0x40>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	60d3      	str	r3, [r2, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00
 800095c:	05fa0000 	.word	0x05fa0000

08000960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <__NVIC_GetPriorityGrouping+0x18>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	0a1b      	lsrs	r3, r3, #8
 800096a:	f003 0307 	and.w	r3, r3, #7
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0b      	blt.n	80009a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 021f 	and.w	r2, r3, #31
 8000994:	4907      	ldr	r1, [pc, #28]	; (80009b4 <__NVIC_EnableIRQ+0x38>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	095b      	lsrs	r3, r3, #5
 800099c:	2001      	movs	r0, #1
 800099e:	fa00 f202 	lsl.w	r2, r0, r2
 80009a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e100 	.word	0xe000e100

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	; (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	; (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f1c3 0307 	rsb	r3, r3, #7
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	bf28      	it	cs
 8000a2a:	2304      	movcs	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d902      	bls.n	8000a3c <NVIC_EncodePriority+0x30>
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	e000      	b.n	8000a3e <NVIC_EncodePriority+0x32>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	43d9      	mvns	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	4313      	orrs	r3, r2
         );
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3724      	adds	r7, #36	; 0x24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f7ff ff8e 	bl	80009b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff29 	bl	8000918 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae0:	f7ff ff3e 	bl	8000960 <__NVIC_GetPriorityGrouping>
 8000ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff8e 	bl	8000a0c <NVIC_EncodePriority>
 8000af0:	4602      	mov	r2, r0
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5d 	bl	80009b8 <__NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff31 	bl	800097c <__NVIC_EnableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffa2 	bl	8000a74 <SysTick_Config>
 8000b30:	4603      	mov	r3, r0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	e175      	b.n	8000e48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f040 8164 	bne.w	8000e42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d005      	beq.n	8000b92 <HAL_GPIO_Init+0x56>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d130      	bne.n	8000bf4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	68da      	ldr	r2, [r3, #12]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	091b      	lsrs	r3, r3, #4
 8000bde:	f003 0201 	and.w	r2, r3, #1
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	d017      	beq.n	8000c30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	689a      	ldr	r2, [r3, #8]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d123      	bne.n	8000c84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	08da      	lsrs	r2, r3, #3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3208      	adds	r2, #8
 8000c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	691a      	ldr	r2, [r3, #16]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	08da      	lsrs	r2, r3, #3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3208      	adds	r2, #8
 8000c7e:	69b9      	ldr	r1, [r7, #24]
 8000c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0203 	and.w	r2, r3, #3
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 80be 	beq.w	8000e42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b66      	ldr	r3, [pc, #408]	; (8000e60 <HAL_GPIO_Init+0x324>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a65      	ldr	r2, [pc, #404]	; (8000e60 <HAL_GPIO_Init+0x324>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b63      	ldr	r3, [pc, #396]	; (8000e60 <HAL_GPIO_Init+0x324>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cde:	4a61      	ldr	r2, [pc, #388]	; (8000e64 <HAL_GPIO_Init+0x328>)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a58      	ldr	r2, [pc, #352]	; (8000e68 <HAL_GPIO_Init+0x32c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d037      	beq.n	8000d7a <HAL_GPIO_Init+0x23e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a57      	ldr	r2, [pc, #348]	; (8000e6c <HAL_GPIO_Init+0x330>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d031      	beq.n	8000d76 <HAL_GPIO_Init+0x23a>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a56      	ldr	r2, [pc, #344]	; (8000e70 <HAL_GPIO_Init+0x334>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d02b      	beq.n	8000d72 <HAL_GPIO_Init+0x236>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a55      	ldr	r2, [pc, #340]	; (8000e74 <HAL_GPIO_Init+0x338>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d025      	beq.n	8000d6e <HAL_GPIO_Init+0x232>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a54      	ldr	r2, [pc, #336]	; (8000e78 <HAL_GPIO_Init+0x33c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d01f      	beq.n	8000d6a <HAL_GPIO_Init+0x22e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a53      	ldr	r2, [pc, #332]	; (8000e7c <HAL_GPIO_Init+0x340>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d019      	beq.n	8000d66 <HAL_GPIO_Init+0x22a>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a52      	ldr	r2, [pc, #328]	; (8000e80 <HAL_GPIO_Init+0x344>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0x226>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a51      	ldr	r2, [pc, #324]	; (8000e84 <HAL_GPIO_Init+0x348>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d00d      	beq.n	8000d5e <HAL_GPIO_Init+0x222>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a50      	ldr	r2, [pc, #320]	; (8000e88 <HAL_GPIO_Init+0x34c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d007      	beq.n	8000d5a <HAL_GPIO_Init+0x21e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4f      	ldr	r2, [pc, #316]	; (8000e8c <HAL_GPIO_Init+0x350>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d101      	bne.n	8000d56 <HAL_GPIO_Init+0x21a>
 8000d52:	2309      	movs	r3, #9
 8000d54:	e012      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d56:	230a      	movs	r3, #10
 8000d58:	e010      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	e00e      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d5e:	2307      	movs	r3, #7
 8000d60:	e00c      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d62:	2306      	movs	r3, #6
 8000d64:	e00a      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d66:	2305      	movs	r3, #5
 8000d68:	e008      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e004      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d72:	2302      	movs	r3, #2
 8000d74:	e002      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <HAL_GPIO_Init+0x240>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	69fa      	ldr	r2, [r7, #28]
 8000d7e:	f002 0203 	and.w	r2, r2, #3
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	4093      	lsls	r3, r2
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d8c:	4935      	ldr	r1, [pc, #212]	; (8000e64 <HAL_GPIO_Init+0x328>)
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	089b      	lsrs	r3, r3, #2
 8000d92:	3302      	adds	r3, #2
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <HAL_GPIO_Init+0x354>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <HAL_GPIO_Init+0x354>)
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <HAL_GPIO_Init+0x354>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000de8:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <HAL_GPIO_Init+0x354>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <HAL_GPIO_Init+0x354>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <HAL_GPIO_Init+0x354>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e18:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_GPIO_Init+0x354>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <HAL_GPIO_Init+0x354>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3301      	adds	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	f67f ae86 	bls.w	8000b5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40021400 	.word	0x40021400
 8000e80:	40021800 	.word	0x40021800
 8000e84:	40021c00 	.word	0x40021c00
 8000e88:	40022000 	.word	0x40022000
 8000e8c:	40022400 	.word	0x40022400
 8000e90:	40013c00 	.word	0x40013c00

08000e94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e96:	b08f      	sub	sp, #60	; 0x3c
 8000e98:	af0a      	add	r7, sp, #40	; 0x28
 8000e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e116      	b.n	80010d4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d106      	bne.n	8000ec6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f006 f9ab 	bl	800721c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d102      	bne.n	8000ee0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 fcbc 	bl	8003862 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	687e      	ldr	r6, [r7, #4]
 8000ef2:	466d      	mov	r5, sp
 8000ef4:	f106 0410 	add.w	r4, r6, #16
 8000ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f08:	1d33      	adds	r3, r6, #4
 8000f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f0c:	6838      	ldr	r0, [r7, #0]
 8000f0e:	f002 fb9d 	bl	800364c <USB_CoreInit>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e0d7      	b.n	80010d4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 fcaa 	bl	8003884 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e04a      	b.n	8000fcc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	333d      	adds	r3, #61	; 0x3d
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	333c      	adds	r3, #60	; 0x3c
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	b298      	uxth	r0, r3
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	3344      	adds	r3, #68	; 0x44
 8000f72:	4602      	mov	r2, r0
 8000f74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f76:	7bfa      	ldrb	r2, [r7, #15]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	3340      	adds	r3, #64	; 0x40
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	3348      	adds	r3, #72	; 0x48
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	334c      	adds	r3, #76	; 0x4c
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3354      	adds	r3, #84	; 0x54
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3af      	bcc.n	8000f36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e044      	b.n	8001066 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	3301      	adds	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	d3b5      	bcc.n	8000fdc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	687e      	ldr	r6, [r7, #4]
 8001078:	466d      	mov	r5, sp
 800107a:	f106 0410 	add.w	r4, r6, #16
 800107e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800108a:	e885 0003 	stmia.w	r5, {r0, r1}
 800108e:	1d33      	adds	r3, r6, #4
 8001090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001092:	6838      	ldr	r0, [r7, #0]
 8001094:	f002 fc42 	bl	800391c <USB_DevInit>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2202      	movs	r2, #2
 80010a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e014      	b.n	80010d4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d102      	bne.n	80010c8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f001 f97a 	bl	80023bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 fd90 	bl	8004bf2 <USB_DevDisconnect>

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_PCD_Start+0x16>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e012      	b.n	8001118 <HAL_PCD_Start+0x3c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fb9e 	bl	8003840 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fd51 	bl	8004bb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b08d      	sub	sp, #52	; 0x34
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fe0f 	bl	8004d5a <USB_GetMode>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	f040 84b7 	bne.w	8001ab2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f003 fd73 	bl	8004c34 <USB_ReadInterrupts>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 84ad 	beq.w	8001ab0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	0a1b      	lsrs	r3, r3, #8
 8001160:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fd60 	bl	8004c34 <USB_ReadInterrupts>
 8001174:	4603      	mov	r3, r0
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b02      	cmp	r3, #2
 800117c:	d107      	bne.n	800118e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f002 0202 	and.w	r2, r2, #2
 800118c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fd4e 	bl	8004c34 <USB_ReadInterrupts>
 8001198:	4603      	mov	r3, r0
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	2b10      	cmp	r3, #16
 80011a0:	d161      	bne.n	8001266 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0210 	bic.w	r2, r2, #16
 80011b0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	f003 020f 	and.w	r2, r3, #15
 80011be:	4613      	mov	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	3304      	adds	r3, #4
 80011d0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	0c5b      	lsrs	r3, r3, #17
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d124      	bne.n	8001228 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d035      	beq.n	8001256 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	6a38      	ldr	r0, [r7, #32]
 80011fe:	f003 fb85 	bl	800490c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120e:	441a      	add	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	6a1a      	ldr	r2, [r3, #32]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001220:	441a      	add	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	621a      	str	r2, [r3, #32]
 8001226:	e016      	b.n	8001256 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	0c5b      	lsrs	r3, r3, #17
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	2b06      	cmp	r3, #6
 8001232:	d110      	bne.n	8001256 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800123a:	2208      	movs	r2, #8
 800123c:	4619      	mov	r1, r3
 800123e:	6a38      	ldr	r0, [r7, #32]
 8001240:	f003 fb64 	bl	800490c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	6a1a      	ldr	r2, [r3, #32]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001250:	441a      	add	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	699a      	ldr	r2, [r3, #24]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0210 	orr.w	r2, r2, #16
 8001264:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fce2 	bl	8004c34 <USB_ReadInterrupts>
 8001270:	4603      	mov	r3, r0
 8001272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001276:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800127a:	f040 80a7 	bne.w	80013cc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fce7 	bl	8004c5a <USB_ReadDevAllOutEpInterrupt>
 800128c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800128e:	e099      	b.n	80013c4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 808e 	beq.w	80013b8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fd0b 	bl	8004cc2 <USB_ReadDevOutEPInterrupt>
 80012ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00c      	beq.n	80012d2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	015a      	lsls	r2, r3, #5
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	4413      	add	r3, r2
 80012c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c4:	461a      	mov	r2, r3
 80012c6:	2301      	movs	r3, #1
 80012c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 feef 	bl	80020b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00c      	beq.n	80012f6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	015a      	lsls	r2, r3, #5
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	4413      	add	r3, r2
 80012e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e8:	461a      	mov	r2, r3
 80012ea:	2308      	movs	r3, #8
 80012ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 ffc5 	bl	8002280 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	015a      	lsls	r2, r3, #5
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	4413      	add	r3, r2
 8001308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130c:	461a      	mov	r2, r3
 800130e:	2310      	movs	r3, #16
 8001310:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d030      	beq.n	800137e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001324:	2b80      	cmp	r3, #128	; 0x80
 8001326:	d109      	bne.n	800133c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800133c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	3304      	adds	r3, #4
 8001350:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d108      	bne.n	800136c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2200      	movs	r2, #0
 800135e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f006 f87c 	bl	8007464 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	015a      	lsls	r2, r3, #5
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	4413      	add	r3, r2
 8001374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001378:	461a      	mov	r2, r3
 800137a:	2302      	movs	r3, #2
 800137c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f003 0320 	and.w	r3, r3, #32
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	015a      	lsls	r2, r3, #5
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	4413      	add	r3, r2
 8001390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001394:	461a      	mov	r2, r3
 8001396:	2320      	movs	r3, #32
 8001398:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	015a      	lsls	r2, r3, #5
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	4413      	add	r3, r2
 80013ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b0:	461a      	mov	r2, r3
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	3301      	adds	r3, #1
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c0:	085b      	lsrs	r3, r3, #1
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f47f af62 	bne.w	8001290 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fc2f 	bl	8004c34 <USB_ReadInterrupts>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013e0:	f040 80db 	bne.w	800159a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fc50 	bl	8004c8e <USB_ReadDevAllInEpInterrupt>
 80013ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013f4:	e0cd      	b.n	8001592 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80c2 	beq.w	8001586 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fc76 	bl	8004cfe <USB_ReadDevInEPInterrupt>
 8001412:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d057      	beq.n	80014ce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	2201      	movs	r2, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	69f9      	ldr	r1, [r7, #28]
 800143a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800143e:	4013      	ands	r3, r2
 8001440:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800144e:	461a      	mov	r2, r3
 8001450:	2301      	movs	r3, #1
 8001452:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d132      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	334c      	adds	r3, #76	; 0x4c
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4403      	add	r3, r0
 800147c:	3348      	adds	r3, #72	; 0x48
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4419      	add	r1, r3
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001486:	4613      	mov	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4403      	add	r3, r0
 8001490:	334c      	adds	r3, #76	; 0x4c
 8001492:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	2b00      	cmp	r3, #0
 8001498:	d113      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x3a2>
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	3354      	adds	r3, #84	; 0x54
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d108      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014ba:	461a      	mov	r2, r3
 80014bc:	2101      	movs	r1, #1
 80014be:	f003 fc7f 	bl	8004dc0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f005 ff46 	bl	800735a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	015a      	lsls	r2, r3, #5
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	4413      	add	r3, r2
 80014e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e4:	461a      	mov	r2, r3
 80014e6:	2308      	movs	r3, #8
 80014e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	015a      	lsls	r2, r3, #5
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001500:	461a      	mov	r2, r3
 8001502:	2310      	movs	r3, #16
 8001504:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800151c:	461a      	mov	r2, r3
 800151e:	2340      	movs	r3, #64	; 0x40
 8001520:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d023      	beq.n	8001574 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800152c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800152e:	6a38      	ldr	r0, [r7, #32]
 8001530:	f002 fb52 	bl	8003bd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001536:	4613      	mov	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	3338      	adds	r3, #56	; 0x38
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4413      	add	r3, r2
 8001544:	3304      	adds	r3, #4
 8001546:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	78db      	ldrb	r3, [r3, #3]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d108      	bne.n	8001562 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	2200      	movs	r2, #0
 8001554:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f005 ff93 	bl	8007488 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	015a      	lsls	r2, r3, #5
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800156e:	461a      	mov	r2, r3
 8001570:	2302      	movs	r3, #2
 8001572:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800157e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fd08 	bl	8001f96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	3301      	adds	r3, #1
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	2b00      	cmp	r3, #0
 8001596:	f47f af2e 	bne.w	80013f6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fb48 	bl	8004c34 <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015ae:	d122      	bne.n	80015f6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d108      	bne.n	80015e0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015d6:	2100      	movs	r1, #0
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f006 f90d 	bl	80077f8 <HAL_PCDEx_LPM_Callback>
 80015de:	e002      	b.n	80015e6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f005 ff31 	bl	8007448 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fb1a 	bl	8004c34 <USB_ReadInterrupts>
 8001600:	4603      	mov	r3, r0
 8001602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800160a:	d112      	bne.n	8001632 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b01      	cmp	r3, #1
 800161a:	d102      	bne.n	8001622 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f005 feed 	bl	80073fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001630:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f003 fafc 	bl	8004c34 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001646:	d121      	bne.n	800168c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001656:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d111      	bne.n	8001686 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	f003 020f 	and.w	r2, r3, #15
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800167c:	2101      	movs	r1, #1
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f006 f8ba 	bl	80077f8 <HAL_PCDEx_LPM_Callback>
 8001684:	e002      	b.n	800168c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f005 feb8 	bl	80073fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f003 facf 	bl	8004c34 <USB_ReadInterrupts>
 8001696:	4603      	mov	r3, r0
 8001698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016a0:	f040 80b7 	bne.w	8001812 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2110      	movs	r1, #16
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fa8a 	bl	8003bd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c8:	e046      	b.n	8001758 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	015a      	lsls	r2, r3, #5
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d6:	461a      	mov	r2, r3
 80016d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016dc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ee:	0151      	lsls	r1, r2, #5
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	440a      	add	r2, r1
 80016f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	015a      	lsls	r2, r3, #5
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800170a:	461a      	mov	r2, r3
 800170c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001710:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001714:	015a      	lsls	r2, r3, #5
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001722:	0151      	lsls	r1, r2, #5
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	440a      	add	r2, r1
 8001728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800172c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001730:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001742:	0151      	lsls	r1, r2, #5
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	440a      	add	r2, r1
 8001748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800174c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001750:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001754:	3301      	adds	r3, #1
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175e:	429a      	cmp	r2, r3
 8001760:	d3b3      	bcc.n	80016ca <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001770:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001774:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	2b00      	cmp	r3, #0
 800177c:	d016      	beq.n	80017ac <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178e:	f043 030b 	orr.w	r3, r3, #11
 8001792:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a4:	f043 030b 	orr.w	r3, r3, #11
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	e015      	b.n	80017d8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ba:	4619      	mov	r1, r3
 80017bc:	f242 032b 	movw	r3, #8235	; 0x202b
 80017c0:	4313      	orrs	r3, r2
 80017c2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d2:	f043 030b 	orr.w	r3, r3, #11
 80017d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017fc:	461a      	mov	r2, r3
 80017fe:	f003 fadf 	bl	8004dc0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f003 fa0c 	bl	8004c34 <USB_ReadInterrupts>
 800181c:	4603      	mov	r3, r0
 800181e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001826:	d124      	bne.n	8001872 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f003 faa3 	bl	8004d78 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fa4b 	bl	8003cd2 <USB_GetDevSpeed>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681c      	ldr	r4, [r3, #0]
 8001848:	f001 facc 	bl	8002de4 <HAL_RCC_GetHCLKFreq>
 800184c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	4620      	mov	r0, r4
 8001858:	f001 ff50 	bl	80036fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f005 fda4 	bl	80073aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001870:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f003 f9dc 	bl	8004c34 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b08      	cmp	r3, #8
 8001884:	d10a      	bne.n	800189c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f005 fd81 	bl	800738e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f002 0208 	and.w	r2, r2, #8
 800189a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 f9c7 	bl	8004c34 <USB_ReadInterrupts>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ac:	2b80      	cmp	r3, #128	; 0x80
 80018ae:	d122      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018bc:	2301      	movs	r3, #1
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	e014      	b.n	80018ec <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4619      	mov	r1, r3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fb27 	bl	8001f34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	3301      	adds	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d3e5      	bcc.n	80018c2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f99a 	bl	8004c34 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800190a:	d13b      	bne.n	8001984 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800190c:	2301      	movs	r3, #1
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
 8001910:	e02b      	b.n	800196a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	015a      	lsls	r2, r3, #5
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4413      	add	r3, r2
 800191a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3340      	adds	r3, #64	; 0x40
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d115      	bne.n	8001964 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001938:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800193a:	2b00      	cmp	r3, #0
 800193c:	da12      	bge.n	8001964 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	333f      	adds	r3, #63	; 0x3f
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4619      	mov	r1, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 fae8 	bl	8001f34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	3301      	adds	r3, #1
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001970:	429a      	cmp	r2, r3
 8001972:	d3ce      	bcc.n	8001912 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 f953 	bl	8004c34 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001998:	d155      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800199a:	2301      	movs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	e045      	b.n	8001a2c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d12e      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da2b      	bge.n	8001a26 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019de:	429a      	cmp	r2, r3
 80019e0:	d121      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	69fa      	ldr	r2, [r7, #28]
 8001a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a22:	6053      	str	r3, [r2, #4]
            break;
 8001a24:	e007      	b.n	8001a36 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	3301      	adds	r3, #1
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d3b4      	bcc.n	80019a0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 f8f2 	bl	8004c34 <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5a:	d10a      	bne.n	8001a72 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f005 fd25 	bl	80074ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 f8dc 	bl	8004c34 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d115      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f005 fd15 	bl	80074c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	e000      	b.n	8001ab2 <HAL_PCD_IRQHandler+0x992>
      return;
 8001ab0:	bf00      	nop
    }
  }
}
 8001ab2:	3734      	adds	r7, #52	; 0x34
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd90      	pop	{r4, r7, pc}

08001ab8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_PCD_SetAddress+0x1a>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e013      	b.n	8001afa <HAL_PCD_SetAddress+0x42>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 f83a 	bl	8004b64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4603      	mov	r3, r0
 8001b12:	70fb      	strb	r3, [r7, #3]
 8001b14:	460b      	mov	r3, r1
 8001b16:	803b      	strh	r3, [r7, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da0f      	bge.n	8001b48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 020f 	and.w	r2, r3, #15
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	3338      	adds	r3, #56	; 0x38
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	705a      	strb	r2, [r3, #1]
 8001b46:	e00f      	b.n	8001b68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 020f 	and.w	r2, r3, #15
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3304      	adds	r3, #4
 8001b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b74:	883a      	ldrh	r2, [r7, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	78ba      	ldrb	r2, [r7, #2]
 8001b7e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	785b      	ldrb	r3, [r3, #1]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b92:	78bb      	ldrb	r3, [r7, #2]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d102      	bne.n	8001b9e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_PCD_EP_Open+0xaa>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e00e      	b.n	8001bca <HAL_PCD_EP_Open+0xc8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68f9      	ldr	r1, [r7, #12]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 f8ae 	bl	8003d1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da0f      	bge.n	8001c06 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f003 020f 	and.w	r2, r3, #15
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3338      	adds	r3, #56	; 0x38
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e00f      	b.n	8001c26 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <HAL_PCD_EP_Close+0x6e>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e00e      	b.n	8001c5e <HAL_PCD_EP_Close+0x8c>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 f8ec 	bl	8003e2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	460b      	mov	r3, r1
 8001c74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	f003 020f 	and.w	r2, r3, #15
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d102      	bne.n	8001cc2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc2:	7afb      	ldrb	r3, [r7, #11]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d109      	bne.n	8001ce0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6818      	ldr	r0, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	6979      	ldr	r1, [r7, #20]
 8001cda:	f002 fbd3 	bl	8004484 <USB_EP0StartXfer>
 8001cde:	e008      	b.n	8001cf2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	6979      	ldr	r1, [r7, #20]
 8001cee:	f002 f979 	bl	8003fe4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 020f 	and.w	r2, r3, #15
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3c:	7afb      	ldrb	r3, [r7, #11]
 8001d3e:	f003 020f 	and.w	r2, r3, #15
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	3338      	adds	r3, #56	; 0x38
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	3304      	adds	r3, #4
 8001d52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6c:	7afb      	ldrb	r3, [r7, #11]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d86:	7afb      	ldrb	r3, [r7, #11]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6979      	ldr	r1, [r7, #20]
 8001d9e:	f002 fb71 	bl	8004484 <USB_EP0StartXfer>
 8001da2:	e008      	b.n	8001db6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	6979      	ldr	r1, [r7, #20]
 8001db2:	f002 f917 	bl	8003fe4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 020f 	and.w	r2, r3, #15
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d901      	bls.n	8001dde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e050      	b.n	8001e80 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da0f      	bge.n	8001e06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	3338      	adds	r3, #56	; 0x38
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	705a      	strb	r2, [r3, #1]
 8001e04:	e00d      	b.n	8001e22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	3304      	adds	r3, #4
 8001e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_PCD_EP_SetStall+0x82>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e01e      	b.n	8001e80 <HAL_PCD_EP_SetStall+0xc0>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68f9      	ldr	r1, [r7, #12]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fdb3 	bl	80049bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	b2d9      	uxtb	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e70:	461a      	mov	r2, r3
 8001e72:	f002 ffa5 	bl	8004dc0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 020f 	and.w	r2, r3, #15
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d901      	bls.n	8001ea6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e042      	b.n	8001f2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	da0f      	bge.n	8001ece <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 020f 	and.w	r2, r3, #15
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	3338      	adds	r3, #56	; 0x38
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	705a      	strb	r2, [r3, #1]
 8001ecc:	e00f      	b.n	8001eee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_PCD_EP_ClrStall+0x86>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e00e      	b.n	8001f2c <HAL_PCD_EP_ClrStall+0xa4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68f9      	ldr	r1, [r7, #12]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f002 fdbb 	bl	8004a98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da0c      	bge.n	8001f62 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 020f 	and.w	r2, r3, #15
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	3338      	adds	r3, #56	; 0x38
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	e00c      	b.n	8001f7c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 020f 	and.w	r2, r3, #15
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	3304      	adds	r3, #4
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 fbda 	bl	800473c <USB_EPStopXfer>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b08a      	sub	sp, #40	; 0x28
 8001f9a:	af02      	add	r7, sp, #8
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	3338      	adds	r3, #56	; 0x38
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d901      	bls.n	8001fce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06c      	b.n	80020a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d902      	bls.n	8001fea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3303      	adds	r3, #3
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ff2:	e02b      	b.n	800204c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	429a      	cmp	r2, r3
 8002008:	d902      	bls.n	8002010 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	3303      	adds	r3, #3
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6919      	ldr	r1, [r3, #16]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002028:	b2db      	uxtb	r3, r3
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4603      	mov	r3, r0
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f002 fc2e 	bl	8004890 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	441a      	add	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a1a      	ldr	r2, [r3, #32]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	441a      	add	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	b29b      	uxth	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	429a      	cmp	r2, r3
 8002060:	d809      	bhi.n	8002076 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a1a      	ldr	r2, [r3, #32]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800206a:	429a      	cmp	r2, r3
 800206c:	d203      	bcs.n	8002076 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1be      	bne.n	8001ff4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	429a      	cmp	r2, r3
 8002080:	d811      	bhi.n	80020a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f003 030f 	and.w	r3, r3, #15
 8002088:	2201      	movs	r2, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	43db      	mvns	r3, r3
 800209c:	6939      	ldr	r1, [r7, #16]
 800209e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020a2:	4013      	ands	r3, r2
 80020a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	333c      	adds	r3, #60	; 0x3c
 80020c8:	3304      	adds	r3, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d17b      	bne.n	80021de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	4a61      	ldr	r2, [pc, #388]	; (8002278 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	f240 80b9 	bls.w	800226c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80b3 	beq.w	800226c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002112:	461a      	mov	r2, r3
 8002114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002118:	6093      	str	r3, [r2, #8]
 800211a:	e0a7      	b.n	800226c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4413      	add	r3, r2
 800212e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002132:	461a      	mov	r2, r3
 8002134:	2320      	movs	r3, #32
 8002136:	6093      	str	r3, [r2, #8]
 8002138:	e098      	b.n	800226c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 8093 	bne.w	800226c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d90f      	bls.n	800216e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	461a      	mov	r2, r3
 8002166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800216a:	6093      	str	r3, [r2, #8]
 800216c:	e07e      	b.n	800226c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	3304      	adds	r3, #4
 8002182:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	0159      	lsls	r1, r3, #5
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	440b      	add	r3, r1
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	1ad2      	subs	r2, r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d114      	bne.n	80021d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021b8:	461a      	mov	r2, r3
 80021ba:	2101      	movs	r1, #1
 80021bc:	f002 fe00 	bl	8004dc0 <USB_EP0_OutStart>
 80021c0:	e006      	b.n	80021d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	441a      	add	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f005 f8a4 	bl	8007324 <HAL_PCD_DataOutStageCallback>
 80021dc:	e046      	b.n	800226c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	4a26      	ldr	r2, [pc, #152]	; (800227c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d124      	bne.n	8002230 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fc:	461a      	mov	r2, r3
 80021fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002202:	6093      	str	r3, [r2, #8]
 8002204:	e032      	b.n	800226c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	461a      	mov	r2, r3
 800221e:	2320      	movs	r3, #32
 8002220:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f005 f87b 	bl	8007324 <HAL_PCD_DataOutStageCallback>
 800222e:	e01d      	b.n	800226c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d114      	bne.n	8002260 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d108      	bne.n	8002260 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002258:	461a      	mov	r2, r3
 800225a:	2100      	movs	r1, #0
 800225c:	f002 fdb0 	bl	8004dc0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f005 f85c 	bl	8007324 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	4f54300a 	.word	0x4f54300a
 800227c:	4f54310a 	.word	0x4f54310a

08002280 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	333c      	adds	r3, #60	; 0x3c
 8002298:	3304      	adds	r3, #4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4a15      	ldr	r2, [pc, #84]	; (8002308 <PCD_EP_OutSetupPacket_int+0x88>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d90e      	bls.n	80022d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d009      	beq.n	80022d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022cc:	461a      	mov	r2, r3
 80022ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f005 f813 	bl	8007300 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <PCD_EP_OutSetupPacket_int+0x88>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d90c      	bls.n	80022fc <PCD_EP_OutSetupPacket_int+0x7c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d108      	bne.n	80022fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022f4:	461a      	mov	r2, r3
 80022f6:	2101      	movs	r1, #1
 80022f8:	f002 fd62 	bl	8004dc0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	4f54300a 	.word	0x4f54300a

0800230c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
 8002318:	4613      	mov	r3, r2
 800231a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d107      	bne.n	800233a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800232a:	883b      	ldrh	r3, [r7, #0]
 800232c:	0419      	lsls	r1, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	430a      	orrs	r2, r1
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
 8002338:	e028      	b.n	800238c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	4413      	add	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e00d      	b.n	800236a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	3340      	adds	r3, #64	; 0x40
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	4413      	add	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	3301      	adds	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	3b01      	subs	r3, #1
 8002370:	429a      	cmp	r2, r3
 8002372:	d3ec      	bcc.n	800234e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002374:	883b      	ldrh	r3, [r7, #0]
 8002376:	0418      	lsls	r0, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	3b01      	subs	r3, #1
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	4302      	orrs	r2, r0
 8002384:	3340      	adds	r3, #64	; 0x40
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_PCDEx_ActivateLPM+0x44>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	10000003 	.word	0x10000003

08002404 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b23      	ldr	r3, [pc, #140]	; (800249c <HAL_PWREx_EnableOverDrive+0x98>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a22      	ldr	r2, [pc, #136]	; (800249c <HAL_PWREx_EnableOverDrive+0x98>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <HAL_PWREx_EnableOverDrive+0x98>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002432:	f7fe fa41 	bl	80008b8 <HAL_GetTick>
 8002436:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002438:	e009      	b.n	800244e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800243a:	f7fe fa3d 	bl	80008b8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002448:	d901      	bls.n	800244e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e022      	b.n	8002494 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245a:	d1ee      	bne.n	800243a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002466:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002468:	f7fe fa26 	bl	80008b8 <HAL_GetTick>
 800246c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800246e:	e009      	b.n	8002484 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002470:	f7fe fa22 	bl	80008b8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800247e:	d901      	bls.n	8002484 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e007      	b.n	8002494 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002490:	d1ee      	bne.n	8002470 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40023800 	.word	0x40023800
 80024a0:	40007000 	.word	0x40007000

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e29b      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8087 	beq.w	80025d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c8:	4b96      	ldr	r3, [pc, #600]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d00c      	beq.n	80024ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d4:	4b93      	ldr	r3, [pc, #588]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d112      	bne.n	8002506 <HAL_RCC_OscConfig+0x62>
 80024e0:	4b90      	ldr	r3, [pc, #576]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ec:	d10b      	bne.n	8002506 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ee:	4b8d      	ldr	r3, [pc, #564]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d06c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x130>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d168      	bne.n	80025d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e275      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x7a>
 8002510:	4b84      	ldr	r3, [pc, #528]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a83      	ldr	r2, [pc, #524]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e02e      	b.n	800257c <HAL_RCC_OscConfig+0xd8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x9c>
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7e      	ldr	r2, [pc, #504]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b7c      	ldr	r3, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a7b      	ldr	r2, [pc, #492]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xd8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0xc0>
 800254a:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a75      	ldr	r2, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b73      	ldr	r3, [pc, #460]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a72      	ldr	r2, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xd8>
 8002564:	4b6f      	ldr	r3, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6e      	ldr	r2, [pc, #440]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b6c      	ldr	r3, [pc, #432]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a6b      	ldr	r2, [pc, #428]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe f998 	bl	80008b8 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe f994 	bl	80008b8 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e229      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b61      	ldr	r3, [pc, #388]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xe8>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe f984 	bl	80008b8 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe f980 	bl	80008b8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e215      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x110>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d069      	beq.n	80026b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e2:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ee:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x190>
 80025fa:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x17a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1e9      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	493d      	ldr	r1, [pc, #244]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	e040      	b.n	80026b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d023      	beq.n	8002684 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a38      	ldr	r2, [pc, #224]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe f936 	bl	80008b8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7fe f932 	bl	80008b8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1c7      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b30      	ldr	r3, [pc, #192]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4929      	ldr	r1, [pc, #164]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]
 8002682:	e018      	b.n	80026b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a26      	ldr	r2, [pc, #152]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7fe f912 	bl	80008b8 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002698:	f7fe f90e 	bl	80008b8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e1a3      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d038      	beq.n	8002734 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d019      	beq.n	80026fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80026cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe f8ef 	bl	80008b8 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026de:	f7fe f8eb 	bl	80008b8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e180      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x23a>
 80026fc:	e01a      	b.n	8002734 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002702:	4a08      	ldr	r2, [pc, #32]	; (8002724 <HAL_RCC_OscConfig+0x280>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7fe f8d5 	bl	80008b8 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002712:	f7fe f8d1 	bl	80008b8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d903      	bls.n	8002728 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e166      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
 8002724:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	4b92      	ldr	r3, [pc, #584]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ee      	bne.n	8002712 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80a4 	beq.w	800288a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a88      	ldr	r2, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b86      	ldr	r3, [pc, #536]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	4b83      	ldr	r3, [pc, #524]	; (8002978 <HAL_RCC_OscConfig+0x4d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002776:	4b80      	ldr	r3, [pc, #512]	; (8002978 <HAL_RCC_OscConfig+0x4d4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a7f      	ldr	r2, [pc, #508]	; (8002978 <HAL_RCC_OscConfig+0x4d4>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe f899 	bl	80008b8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe f895 	bl	80008b8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b64      	cmp	r3, #100	; 0x64
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e12a      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279c:	4b76      	ldr	r3, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x4d4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x31a>
 80027b0:	4b70      	ldr	r3, [pc, #448]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a6f      	ldr	r2, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70
 80027bc:	e02d      	b.n	800281a <HAL_RCC_OscConfig+0x376>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x33c>
 80027c6:	4b6b      	ldr	r3, [pc, #428]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	4b68      	ldr	r3, [pc, #416]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a67      	ldr	r2, [pc, #412]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
 80027de:	e01c      	b.n	800281a <HAL_RCC_OscConfig+0x376>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d10c      	bne.n	8002802 <HAL_RCC_OscConfig+0x35e>
 80027e8:	4b62      	ldr	r3, [pc, #392]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a61      	ldr	r2, [pc, #388]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	4a5e      	ldr	r2, [pc, #376]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002800:	e00b      	b.n	800281a <HAL_RCC_OscConfig+0x376>
 8002802:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a5b      	ldr	r2, [pc, #364]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
 800280e:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d015      	beq.n	800284e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7fe f849 	bl	80008b8 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe f845 	bl	80008b8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0d8      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ee      	beq.n	800282a <HAL_RCC_OscConfig+0x386>
 800284c:	e014      	b.n	8002878 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7fe f833 	bl	80008b8 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe f82f 	bl	80008b8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e0c2      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	4b41      	ldr	r3, [pc, #260]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ee      	bne.n	8002856 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a3c      	ldr	r2, [pc, #240]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80ae 	beq.w	80029f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002894:	4b37      	ldr	r3, [pc, #220]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d06d      	beq.n	800297c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d14b      	bne.n	8002940 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a31      	ldr	r2, [pc, #196]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80028ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe f800 	bl	80008b8 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fd fffc 	bl	80008b8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e091      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	071b      	lsls	r3, r3, #28
 8002906:	491b      	ldr	r1, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fd ffce 	bl	80008b8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7fd ffca 	bl	80008b8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e05f      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x47c>
 800293e:	e057      	b.n	80029f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fd ffb4 	bl	80008b8 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fd ffb0 	bl	80008b8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e045      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002966:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_RCC_OscConfig+0x4d0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x4b0>
 8002972:	e03d      	b.n	80029f0 <HAL_RCC_OscConfig+0x54c>
 8002974:	40023800 	.word	0x40023800
 8002978:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800297c:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <HAL_RCC_OscConfig+0x558>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d030      	beq.n	80029ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d129      	bne.n	80029ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d122      	bne.n	80029ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d119      	bne.n	80029ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	3b01      	subs	r3, #1
 80029c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d10f      	bne.n	80029ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0d0      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b6a      	ldr	r3, [pc, #424]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d910      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b67      	ldr	r3, [pc, #412]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 020f 	bic.w	r2, r3, #15
 8002a2e:	4965      	ldr	r1, [pc, #404]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0b8      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d020      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a60:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a52      	ldr	r2, [pc, #328]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a84:	4b50      	ldr	r3, [pc, #320]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	494d      	ldr	r1, [pc, #308]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d040      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d107      	bne.n	8002aba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aaa:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d115      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e07f      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e073      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e06b      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae2:	4b39      	ldr	r3, [pc, #228]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4936      	ldr	r1, [pc, #216]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af4:	f7fd fee0 	bl	80008b8 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afc:	f7fd fedc 	bl	80008b8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e053      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 020c 	and.w	r2, r3, #12
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d1eb      	bne.n	8002afc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d210      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 020f 	bic.w	r2, r3, #15
 8002b3a:	4922      	ldr	r1, [pc, #136]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e032      	b.n	8002bba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4916      	ldr	r1, [pc, #88]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b92:	f000 f821 	bl	8002bd8 <HAL_RCC_GetSysClockFreq>
 8002b96:	4602      	mov	r2, r0
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	490a      	ldr	r1, [pc, #40]	; (8002bcc <HAL_RCC_ClockConfig+0x1cc>)
 8002ba4:	5ccb      	ldrb	r3, [r1, r3]
 8002ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1d4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fe3c 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023c00 	.word	0x40023c00
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	08007bd4 	.word	0x08007bd4
 8002bd0:	20000000 	.word	0x20000000
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bdc:	b094      	sub	sp, #80	; 0x50
 8002bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	647b      	str	r3, [r7, #68]	; 0x44
 8002be4:	2300      	movs	r3, #0
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	2300      	movs	r3, #0
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf0:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d00d      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x40>
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	f200 80e1 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x34>
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0a:	e0db      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c0c:	4b73      	ldr	r3, [pc, #460]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c10:	e0db      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c12:	4b73      	ldr	r3, [pc, #460]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c16:	e0d8      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c18:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c20:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d063      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2e:	4b6a      	ldr	r3, [pc, #424]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	099b      	lsrs	r3, r3, #6
 8002c34:	2200      	movs	r2, #0
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30
 8002c42:	2300      	movs	r3, #0
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
 8002c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	0159      	lsls	r1, r3, #5
 8002c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5c:	0150      	lsls	r0, r2, #5
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4621      	mov	r1, r4
 8002c64:	1a51      	subs	r1, r2, r1
 8002c66:	6139      	str	r1, [r7, #16]
 8002c68:	4629      	mov	r1, r5
 8002c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	018b      	lsls	r3, r1, #6
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c86:	4651      	mov	r1, sl
 8002c88:	018a      	lsls	r2, r1, #6
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c90:	4659      	mov	r1, fp
 8002c92:	eb63 0901 	sbc.w	r9, r3, r1
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002caa:	4690      	mov	r8, r2
 8002cac:	4699      	mov	r9, r3
 8002cae:	4623      	mov	r3, r4
 8002cb0:	eb18 0303 	adds.w	r3, r8, r3
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	eb49 0303 	adc.w	r3, r9, r3
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cca:	4629      	mov	r1, r5
 8002ccc:	024b      	lsls	r3, r1, #9
 8002cce:	4621      	mov	r1, r4
 8002cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	024a      	lsls	r2, r1, #9
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ce8:	f7fd faa6 	bl	8000238 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cf4:	e058      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf6:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	4611      	mov	r1, r2
 8002d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d10:	4642      	mov	r2, r8
 8002d12:	464b      	mov	r3, r9
 8002d14:	f04f 0000 	mov.w	r0, #0
 8002d18:	f04f 0100 	mov.w	r1, #0
 8002d1c:	0159      	lsls	r1, r3, #5
 8002d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d22:	0150      	lsls	r0, r2, #5
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4641      	mov	r1, r8
 8002d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d2e:	4649      	mov	r1, r9
 8002d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d48:	ebb2 040a 	subs.w	r4, r2, sl
 8002d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	00eb      	lsls	r3, r5, #3
 8002d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d5e:	00e2      	lsls	r2, r4, #3
 8002d60:	4614      	mov	r4, r2
 8002d62:	461d      	mov	r5, r3
 8002d64:	4643      	mov	r3, r8
 8002d66:	18e3      	adds	r3, r4, r3
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	eb45 0303 	adc.w	r3, r5, r3
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d7e:	4629      	mov	r1, r5
 8002d80:	028b      	lsls	r3, r1, #10
 8002d82:	4621      	mov	r1, r4
 8002d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d88:	4621      	mov	r1, r4
 8002d8a:	028a      	lsls	r2, r1, #10
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d92:	2200      	movs	r2, #0
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	61fa      	str	r2, [r7, #28]
 8002d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d9c:	f7fd fa4c 	bl	8000238 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	3301      	adds	r3, #1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8002dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3750      	adds	r7, #80	; 0x50
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	00f42400 	.word	0x00f42400
 8002de0:	007a1200 	.word	0x007a1200

08002de4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000000 	.word	0x20000000

08002dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e24:	4b69      	ldr	r3, [pc, #420]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a68      	ldr	r2, [pc, #416]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e2e:	6093      	str	r3, [r2, #8]
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	4964      	ldr	r1, [pc, #400]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d017      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e56:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	4959      	ldr	r1, [pc, #356]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e74:	d101      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d017      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e92:	4b4e      	ldr	r3, [pc, #312]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	494a      	ldr	r1, [pc, #296]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 808b 	beq.w	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	4a39      	ldr	r2, [pc, #228]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6413      	str	r3, [r2, #64]	; 0x40
 8002eec:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a34      	ldr	r2, [pc, #208]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fd fcd8 	bl	80008b8 <HAL_GetTick>
 8002f08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0c:	f7fd fcd4 	bl	80008b8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e38f      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d035      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d02e      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f48:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f5e:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f6a:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d114      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fd fc9c 	bl	80008b8 <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fd fc98 	bl	80008b8 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e351      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0ee      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fb2:	d111      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	4901      	ldr	r1, [pc, #4]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40007000 	.word	0x40007000
 8002fd4:	0ffffcff 	.word	0x0ffffcff
 8002fd8:	4bac      	ldr	r3, [pc, #688]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4aab      	ldr	r2, [pc, #684]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fe2:	6093      	str	r3, [r2, #8]
 8002fe4:	4ba9      	ldr	r3, [pc, #676]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	49a6      	ldr	r1, [pc, #664]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003002:	4ba2      	ldr	r3, [pc, #648]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003008:	4aa0      	ldr	r2, [pc, #640]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003012:	4b9e      	ldr	r3, [pc, #632]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003014:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	499b      	ldr	r1, [pc, #620]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003030:	4b96      	ldr	r3, [pc, #600]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003036:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800303e:	4993      	ldr	r1, [pc, #588]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003052:	4b8e      	ldr	r3, [pc, #568]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003060:	498a      	ldr	r1, [pc, #552]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003074:	4b85      	ldr	r3, [pc, #532]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003082:	4982      	ldr	r1, [pc, #520]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003096:	4b7d      	ldr	r3, [pc, #500]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a4:	4979      	ldr	r1, [pc, #484]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b8:	4b74      	ldr	r3, [pc, #464]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4971      	ldr	r1, [pc, #452]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030da:	4b6c      	ldr	r3, [pc, #432]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	f023 020c 	bic.w	r2, r3, #12
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e8:	4968      	ldr	r1, [pc, #416]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030fc:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310a:	4960      	ldr	r1, [pc, #384]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800311e:	4b5b      	ldr	r3, [pc, #364]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	4957      	ldr	r1, [pc, #348]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003140:	4b52      	ldr	r3, [pc, #328]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	494f      	ldr	r1, [pc, #316]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003162:	4b4a      	ldr	r3, [pc, #296]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	4946      	ldr	r1, [pc, #280]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003184:	4b41      	ldr	r3, [pc, #260]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	493e      	ldr	r1, [pc, #248]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b4:	4935      	ldr	r1, [pc, #212]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031c8:	4b30      	ldr	r3, [pc, #192]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d6:	492d      	ldr	r1, [pc, #180]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d011      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031ea:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f8:	4924      	ldr	r1, [pc, #144]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003208:	d101      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800320a:	2301      	movs	r3, #1
 800320c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003238:	4914      	ldr	r1, [pc, #80]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00b      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325c:	490b      	ldr	r1, [pc, #44]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00f      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003280:	4902      	ldr	r1, [pc, #8]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003288:	e002      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800329c:	4b8a      	ldr	r3, [pc, #552]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	4986      	ldr	r1, [pc, #536]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032c0:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d0:	497d      	ldr	r1, [pc, #500]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d006      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80d6 	beq.w	8003498 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032ec:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a75      	ldr	r2, [pc, #468]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f8:	f7fd fade 	bl	80008b8 <HAL_GetTick>
 80032fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003300:	f7fd fada 	bl	80008b8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e195      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003312:	4b6d      	ldr	r3, [pc, #436]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d021      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11d      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003332:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003338:	0c1b      	lsrs	r3, r3, #16
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003346:	0e1b      	lsrs	r3, r3, #24
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	019a      	lsls	r2, r3, #6
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	071b      	lsls	r3, r3, #28
 8003366:	4958      	ldr	r1, [pc, #352]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800338c:	2b00      	cmp	r3, #0
 800338e:	d02e      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003398:	d129      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800339a:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033a8:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ae:	0f1b      	lsrs	r3, r3, #28
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	019a      	lsls	r2, r3, #6
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	041b      	lsls	r3, r3, #16
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	071b      	lsls	r3, r3, #28
 80033ce:	493e      	ldr	r1, [pc, #248]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033d6:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033dc:	f023 021f 	bic.w	r2, r3, #31
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	3b01      	subs	r3, #1
 80033e6:	4938      	ldr	r1, [pc, #224]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01d      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033fa:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003400:	0e1b      	lsrs	r3, r3, #24
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003408:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800340a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340e:	0f1b      	lsrs	r3, r3, #28
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	019a      	lsls	r2, r3, #6
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	431a      	orrs	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	071b      	lsls	r3, r3, #28
 800342e:	4926      	ldr	r1, [pc, #152]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d011      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	019a      	lsls	r2, r3, #6
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	041b      	lsls	r3, r3, #16
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	061b      	lsls	r3, r3, #24
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	071b      	lsls	r3, r3, #28
 800345e:	491a      	ldr	r1, [pc, #104]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a17      	ldr	r2, [pc, #92]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003472:	f7fd fa21 	bl	80008b8 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800347a:	f7fd fa1d 	bl	80008b8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b64      	cmp	r3, #100	; 0x64
 8003486:	d901      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0d8      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b01      	cmp	r3, #1
 800349c:	f040 80ce 	bne.w	800363c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fd fa04 	bl	80008b8 <HAL_GetTick>
 80034b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034b2:	e00b      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034b4:	f7fd fa00 	bl	80008b8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d904      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0bb      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034cc:	4b5e      	ldr	r3, [pc, #376]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d8:	d0ec      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d02e      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d12a      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003502:	4b51      	ldr	r3, [pc, #324]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003510:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	0f1b      	lsrs	r3, r3, #28
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	019a      	lsls	r2, r3, #6
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	071b      	lsls	r3, r3, #28
 8003536:	4944      	ldr	r1, [pc, #272]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800353e:	4b42      	ldr	r3, [pc, #264]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003544:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	3b01      	subs	r3, #1
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	493d      	ldr	r1, [pc, #244]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d022      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800356c:	d11d      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	0e1b      	lsrs	r3, r3, #24
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	0f1b      	lsrs	r3, r3, #28
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	019a      	lsls	r2, r3, #6
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	431a      	orrs	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	061b      	lsls	r3, r3, #24
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	071b      	lsls	r3, r3, #28
 80035a2:	4929      	ldr	r1, [pc, #164]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d028      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	0e1b      	lsrs	r3, r3, #24
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035c4:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	0c1b      	lsrs	r3, r3, #16
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	019a      	lsls	r2, r3, #6
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	041b      	lsls	r3, r3, #16
 80035dc:	431a      	orrs	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	071b      	lsls	r3, r3, #28
 80035ea:	4917      	ldr	r1, [pc, #92]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4911      	ldr	r1, [pc, #68]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003614:	f7fd f950 	bl	80008b8 <HAL_GetTick>
 8003618:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800361c:	f7fd f94c 	bl	80008b8 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e007      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800363a:	d1ef      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800

0800364c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800364c:	b084      	sub	sp, #16
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	f107 001c 	add.w	r0, r7, #28
 800365a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	2b01      	cmp	r3, #1
 8003662:	d120      	bne.n	80036a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <USB_CoreInit+0xac>)
 8003676:	4013      	ands	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f001 fbee 	bl	8004e7c <USB_CoreReset>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e010      	b.n	80036c8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f001 fbe2 	bl	8004e7c <USB_CoreReset>
 80036b8:	4603      	mov	r3, r0
 80036ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10b      	bne.n	80036e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f043 0206 	orr.w	r2, r3, #6
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036f2:	b004      	add	sp, #16
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	ffbdffbf 	.word	0xffbdffbf

080036fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d165      	bne.n	80037dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4a41      	ldr	r2, [pc, #260]	; (8003818 <USB_SetTurnaroundTime+0x11c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d906      	bls.n	8003726 <USB_SetTurnaroundTime+0x2a>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4a40      	ldr	r2, [pc, #256]	; (800381c <USB_SetTurnaroundTime+0x120>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d202      	bcs.n	8003726 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003720:	230f      	movs	r3, #15
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e062      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4a3c      	ldr	r2, [pc, #240]	; (800381c <USB_SetTurnaroundTime+0x120>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d306      	bcc.n	800373c <USB_SetTurnaroundTime+0x40>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <USB_SetTurnaroundTime+0x124>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d202      	bcs.n	800373c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003736:	230e      	movs	r3, #14
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e057      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4a38      	ldr	r2, [pc, #224]	; (8003820 <USB_SetTurnaroundTime+0x124>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d306      	bcc.n	8003752 <USB_SetTurnaroundTime+0x56>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4a37      	ldr	r2, [pc, #220]	; (8003824 <USB_SetTurnaroundTime+0x128>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d202      	bcs.n	8003752 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800374c:	230d      	movs	r3, #13
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e04c      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4a33      	ldr	r2, [pc, #204]	; (8003824 <USB_SetTurnaroundTime+0x128>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d306      	bcc.n	8003768 <USB_SetTurnaroundTime+0x6c>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4a32      	ldr	r2, [pc, #200]	; (8003828 <USB_SetTurnaroundTime+0x12c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d802      	bhi.n	8003768 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003762:	230c      	movs	r3, #12
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e041      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <USB_SetTurnaroundTime+0x12c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d906      	bls.n	800377e <USB_SetTurnaroundTime+0x82>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4a2e      	ldr	r2, [pc, #184]	; (800382c <USB_SetTurnaroundTime+0x130>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d802      	bhi.n	800377e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003778:	230b      	movs	r3, #11
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	e036      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4a2a      	ldr	r2, [pc, #168]	; (800382c <USB_SetTurnaroundTime+0x130>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d906      	bls.n	8003794 <USB_SetTurnaroundTime+0x98>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	4a29      	ldr	r2, [pc, #164]	; (8003830 <USB_SetTurnaroundTime+0x134>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d802      	bhi.n	8003794 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800378e:	230a      	movs	r3, #10
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e02b      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4a26      	ldr	r2, [pc, #152]	; (8003830 <USB_SetTurnaroundTime+0x134>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d906      	bls.n	80037aa <USB_SetTurnaroundTime+0xae>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4a25      	ldr	r2, [pc, #148]	; (8003834 <USB_SetTurnaroundTime+0x138>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d202      	bcs.n	80037aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037a4:	2309      	movs	r3, #9
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e020      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4a21      	ldr	r2, [pc, #132]	; (8003834 <USB_SetTurnaroundTime+0x138>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d306      	bcc.n	80037c0 <USB_SetTurnaroundTime+0xc4>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4a20      	ldr	r2, [pc, #128]	; (8003838 <USB_SetTurnaroundTime+0x13c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d802      	bhi.n	80037c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037ba:	2308      	movs	r3, #8
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e015      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <USB_SetTurnaroundTime+0x13c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d906      	bls.n	80037d6 <USB_SetTurnaroundTime+0xda>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <USB_SetTurnaroundTime+0x140>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d202      	bcs.n	80037d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037d0:	2307      	movs	r3, #7
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e00a      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037d6:	2306      	movs	r3, #6
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	e007      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d102      	bne.n	80037e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037e2:	2309      	movs	r3, #9
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e001      	b.n	80037ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037e8:	2309      	movs	r3, #9
 80037ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	029b      	lsls	r3, r3, #10
 8003800:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003804:	431a      	orrs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	00d8acbf 	.word	0x00d8acbf
 800381c:	00e4e1c0 	.word	0x00e4e1c0
 8003820:	00f42400 	.word	0x00f42400
 8003824:	01067380 	.word	0x01067380
 8003828:	011a499f 	.word	0x011a499f
 800382c:	01312cff 	.word	0x01312cff
 8003830:	014ca43f 	.word	0x014ca43f
 8003834:	016e3600 	.word	0x016e3600
 8003838:	01a6ab1f 	.word	0x01a6ab1f
 800383c:	01e84800 	.word	0x01e84800

08003840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0201 	bic.w	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d115      	bne.n	80038d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038b2:	2001      	movs	r0, #1
 80038b4:	f7fd f80c 	bl	80008d0 <HAL_Delay>
      ms++;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f001 fa4b 	bl	8004d5a <USB_GetMode>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d01e      	beq.n	8003908 <USB_SetCurrentMode+0x84>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b31      	cmp	r3, #49	; 0x31
 80038ce:	d9f0      	bls.n	80038b2 <USB_SetCurrentMode+0x2e>
 80038d0:	e01a      	b.n	8003908 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d115      	bne.n	8003904 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038e4:	2001      	movs	r0, #1
 80038e6:	f7fc fff3 	bl	80008d0 <HAL_Delay>
      ms++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3301      	adds	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 fa32 	bl	8004d5a <USB_GetMode>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <USB_SetCurrentMode+0x84>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b31      	cmp	r3, #49	; 0x31
 8003900:	d9f0      	bls.n	80038e4 <USB_SetCurrentMode+0x60>
 8003902:	e001      	b.n	8003908 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e005      	b.n	8003914 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b32      	cmp	r3, #50	; 0x32
 800390c:	d101      	bne.n	8003912 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800391c:	b084      	sub	sp, #16
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800392a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	e009      	b.n	8003950 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	3340      	adds	r3, #64	; 0x40
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	2200      	movs	r2, #0
 8003948:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3301      	adds	r3, #1
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b0e      	cmp	r3, #14
 8003954:	d9f2      	bls.n	800393c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11c      	bne.n	8003996 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396a:	f043 0302 	orr.w	r3, r3, #2
 800396e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e005      	b.n	80039a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039a8:	461a      	mov	r2, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b4:	4619      	mov	r1, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039bc:	461a      	mov	r2, r3
 80039be:	680b      	ldr	r3, [r1, #0]
 80039c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10c      	bne.n	80039e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d104      	bne.n	80039d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039ce:	2100      	movs	r1, #0
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f965 	bl	8003ca0 <USB_SetDevSpeed>
 80039d6:	e008      	b.n	80039ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039d8:	2101      	movs	r1, #1
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f960 	bl	8003ca0 <USB_SetDevSpeed>
 80039e0:	e003      	b.n	80039ea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039e2:	2103      	movs	r1, #3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f95b 	bl	8003ca0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039ea:	2110      	movs	r1, #16
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f8f3 	bl	8003bd8 <USB_FlushTxFifo>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f91f 	bl	8003c40 <USB_FlushRxFifo>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	461a      	mov	r2, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2300      	movs	r3, #0
 8003a22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e043      	b.n	8003abe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a4c:	d118      	bne.n	8003a80 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a60:	461a      	mov	r2, r3
 8003a62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	e013      	b.n	8003a92 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a76:	461a      	mov	r2, r3
 8003a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e008      	b.n	8003a92 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	3301      	adds	r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d3b7      	bcc.n	8003a36 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e043      	b.n	8003b54 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ae2:	d118      	bne.n	8003b16 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af6:	461a      	mov	r2, r3
 8003af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e013      	b.n	8003b28 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	e008      	b.n	8003b28 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	461a      	mov	r2, r3
 8003b24:	2300      	movs	r3, #0
 8003b26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b34:	461a      	mov	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	3301      	adds	r3, #1
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d3b7      	bcc.n	8003acc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f043 0210 	orr.w	r2, r3, #16
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <USB_DevInit+0x2b4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f043 0208 	orr.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <USB_DevInit+0x2b8>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bcc:	b004      	add	sp, #16
 8003bce:	4770      	bx	lr
 8003bd0:	803c3800 	.word	0x803c3800
 8003bd4:	40000004 	.word	0x40000004

08003bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3301      	adds	r3, #1
 8003bea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <USB_FlushTxFifo+0x64>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e01b      	b.n	8003c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	daf2      	bge.n	8003be6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	019b      	lsls	r3, r3, #6
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3301      	adds	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4a08      	ldr	r2, [pc, #32]	; (8003c3c <USB_FlushTxFifo+0x64>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e006      	b.n	8003c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d0f0      	beq.n	8003c10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	00030d40 	.word	0x00030d40

08003c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <USB_FlushRxFifo+0x5c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e018      	b.n	8003c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	daf2      	bge.n	8003c4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2210      	movs	r2, #16
 8003c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <USB_FlushRxFifo+0x5c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e006      	b.n	8003c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d0f0      	beq.n	8003c70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	00030d40 	.word	0x00030d40

08003ca0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b087      	sub	sp, #28
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 0306 	and.w	r3, r3, #6
 8003cea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]
 8003cf6:	e00a      	b.n	8003d0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d002      	beq.n	8003d04 <USB_GetDevSpeed+0x32>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b06      	cmp	r3, #6
 8003d02:	d102      	bne.n	8003d0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d04:	2302      	movs	r3, #2
 8003d06:	75fb      	strb	r3, [r7, #23]
 8003d08:	e001      	b.n	8003d0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d0a:	230f      	movs	r3, #15
 8003d0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d139      	bne.n	8003dac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	2101      	movs	r1, #1
 8003d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d153      	bne.n	8003e18 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	791b      	ldrb	r3, [r3, #4]
 8003d8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	059b      	lsls	r3, r3, #22
 8003d92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d94:	431a      	orrs	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	0159      	lsls	r1, r3, #5
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	440b      	add	r3, r1
 8003d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da2:	4619      	mov	r1, r3
 8003da4:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <USB_ActivateEndpoint+0x10c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	e035      	b.n	8003e18 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	68f9      	ldr	r1, [r7, #12]
 8003dc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d119      	bne.n	8003e18 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	791b      	ldrb	r3, [r3, #4]
 8003dfe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e00:	430b      	orrs	r3, r1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	0159      	lsls	r1, r3, #5
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e10:	4619      	mov	r1, r3
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <USB_ActivateEndpoint+0x10c>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	10008000 	.word	0x10008000

08003e2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	785b      	ldrb	r3, [r3, #1]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d161      	bne.n	8003f0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e5e:	d11f      	bne.n	8003ea0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	0151      	lsls	r1, r2, #5
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	440a      	add	r2, r1
 8003e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	0159      	lsls	r1, r3, #5
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	440b      	add	r3, r1
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	4619      	mov	r1, r3
 8003f04:	4b35      	ldr	r3, [pc, #212]	; (8003fdc <USB_DeactivateEndpoint+0x1b0>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]
 8003f0a:	e060      	b.n	8003fce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f22:	d11f      	bne.n	8003f64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	2101      	movs	r1, #1
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f84:	4013      	ands	r3, r2
 8003f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	2101      	movs	r1, #1
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	68f9      	ldr	r1, [r7, #12]
 8003fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	0159      	lsls	r1, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <USB_DeactivateEndpoint+0x1b4>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	ec337800 	.word	0xec337800
 8003fe0:	eff37800 	.word	0xeff37800

08003fe4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	785b      	ldrb	r3, [r3, #1]
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 8163 	bne.w	80042cc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d132      	bne.n	8004074 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	0159      	lsls	r1, r3, #5
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	440b      	add	r3, r1
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	4619      	mov	r1, r3
 800402a:	4ba5      	ldr	r3, [pc, #660]	; (80042c0 <USB_EPStartXfer+0x2dc>)
 800402c:	4013      	ands	r3, r2
 800402e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800404e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	0159      	lsls	r1, r3, #5
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	440b      	add	r3, r1
 8004066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406a:	4619      	mov	r1, r3
 800406c:	4b95      	ldr	r3, [pc, #596]	; (80042c4 <USB_EPStartXfer+0x2e0>)
 800406e:	4013      	ands	r3, r2
 8004070:	610b      	str	r3, [r1, #16]
 8004072:	e074      	b.n	800415e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	0159      	lsls	r1, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	440b      	add	r3, r1
 800408a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408e:	4619      	mov	r1, r3
 8004090:	4b8c      	ldr	r3, [pc, #560]	; (80042c4 <USB_EPStartXfer+0x2e0>)
 8004092:	4013      	ands	r3, r2
 8004094:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	440b      	add	r3, r1
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	4619      	mov	r1, r3
 80040b2:	4b83      	ldr	r3, [pc, #524]	; (80042c0 <USB_EPStartXfer+0x2dc>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6999      	ldr	r1, [r3, #24]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	440b      	add	r3, r1
 80040d0:	1e59      	subs	r1, r3, #1
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040dc:	4b7a      	ldr	r3, [pc, #488]	; (80042c8 <USB_EPStartXfer+0x2e4>)
 80040de:	400b      	ands	r3, r1
 80040e0:	69b9      	ldr	r1, [r7, #24]
 80040e2:	0148      	lsls	r0, r1, #5
 80040e4:	69f9      	ldr	r1, [r7, #28]
 80040e6:	4401      	add	r1, r0
 80040e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040ec:	4313      	orrs	r3, r2
 80040ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004106:	69b9      	ldr	r1, [r7, #24]
 8004108:	0148      	lsls	r0, r1, #5
 800410a:	69f9      	ldr	r1, [r7, #28]
 800410c:	4401      	add	r1, r0
 800410e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004112:	4313      	orrs	r3, r2
 8004114:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	791b      	ldrb	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d11f      	bne.n	800415e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004138:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800413c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800415c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d14b      	bne.n	80041fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	461a      	mov	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	791b      	ldrb	r3, [r3, #4]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d128      	bne.n	80041da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d110      	bne.n	80041ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e00f      	b.n	80041da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e137      	b.n	800446c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	440a      	add	r2, r1
 8004212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800421a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d015      	beq.n	8004250 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 811f 	beq.w	800446c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	69f9      	ldr	r1, [r7, #28]
 8004246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800424a:	4313      	orrs	r3, r2
 800424c:	634b      	str	r3, [r1, #52]	; 0x34
 800424e:	e10d      	b.n	800446c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d110      	bne.n	8004282 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	0151      	lsls	r1, r2, #5
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	440a      	add	r2, r1
 8004276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800427a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	e00f      	b.n	80042a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4413      	add	r3, r2
 800428a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	6919      	ldr	r1, [r3, #16]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	b298      	uxth	r0, r3
 80042b0:	79fb      	ldrb	r3, [r7, #7]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	4603      	mov	r3, r0
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 faea 	bl	8004890 <USB_WritePacket>
 80042bc:	e0d6      	b.n	800446c <USB_EPStartXfer+0x488>
 80042be:	bf00      	nop
 80042c0:	e007ffff 	.word	0xe007ffff
 80042c4:	fff80000 	.word	0xfff80000
 80042c8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	0159      	lsls	r1, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	440b      	add	r3, r1
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	4619      	mov	r1, r3
 80042e8:	4b63      	ldr	r3, [pc, #396]	; (8004478 <USB_EPStartXfer+0x494>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	0159      	lsls	r1, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	440b      	add	r3, r1
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	4619      	mov	r1, r3
 800430a:	4b5c      	ldr	r3, [pc, #368]	; (800447c <USB_EPStartXfer+0x498>)
 800430c:	4013      	ands	r3, r2
 800430e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d123      	bne.n	8004360 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432e:	69b9      	ldr	r1, [r7, #24]
 8004330:	0148      	lsls	r0, r1, #5
 8004332:	69f9      	ldr	r1, [r7, #28]
 8004334:	4401      	add	r1, r0
 8004336:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800433a:	4313      	orrs	r3, r2
 800433c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800435c:	6113      	str	r3, [r2, #16]
 800435e:	e037      	b.n	80043d0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4413      	add	r3, r2
 800436a:	1e5a      	subs	r2, r3, #1
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	8afa      	ldrh	r2, [r7, #22]
 800437c:	fb03 f202 	mul.w	r2, r3, r2
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	8afb      	ldrh	r3, [r7, #22]
 8004394:	04d9      	lsls	r1, r3, #19
 8004396:	4b3a      	ldr	r3, [pc, #232]	; (8004480 <USB_EPStartXfer+0x49c>)
 8004398:	400b      	ands	r3, r1
 800439a:	69b9      	ldr	r1, [r7, #24]
 800439c:	0148      	lsls	r0, r1, #5
 800439e:	69f9      	ldr	r1, [r7, #28]
 80043a0:	4401      	add	r1, r0
 80043a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043a6:	4313      	orrs	r3, r2
 80043a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	0148      	lsls	r0, r1, #5
 80043c4:	69f9      	ldr	r1, [r7, #28]
 80043c6:	4401      	add	r1, r0
 80043c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043cc:	4313      	orrs	r3, r2
 80043ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10d      	bne.n	80043f2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6919      	ldr	r1, [r3, #16]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	460a      	mov	r2, r1
 80043f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	791b      	ldrb	r3, [r3, #4]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d128      	bne.n	800444c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d110      	bne.n	800442c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00f      	b.n	800444c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	0151      	lsls	r1, r2, #5
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	440a      	add	r2, r1
 8004442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	440a      	add	r2, r1
 8004462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004466:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800446a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	fff80000 	.word	0xfff80000
 800447c:	e007ffff 	.word	0xe007ffff
 8004480:	1ff80000 	.word	0x1ff80000

08004484 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	785b      	ldrb	r3, [r3, #1]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 80ce 	bne.w	8004642 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d132      	bne.n	8004514 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	0159      	lsls	r1, r3, #5
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	440b      	add	r3, r1
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	4619      	mov	r1, r3
 80044ca:	4b9a      	ldr	r3, [pc, #616]	; (8004734 <USB_EP0StartXfer+0x2b0>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	0159      	lsls	r1, r3, #5
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	440b      	add	r3, r1
 8004506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450a:	4619      	mov	r1, r3
 800450c:	4b8a      	ldr	r3, [pc, #552]	; (8004738 <USB_EP0StartXfer+0x2b4>)
 800450e:	4013      	ands	r3, r2
 8004510:	610b      	str	r3, [r1, #16]
 8004512:	e04e      	b.n	80045b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	0159      	lsls	r1, r3, #5
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	440b      	add	r3, r1
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	4619      	mov	r1, r3
 8004530:	4b81      	ldr	r3, [pc, #516]	; (8004738 <USB_EP0StartXfer+0x2b4>)
 8004532:	4013      	ands	r3, r2
 8004534:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	0159      	lsls	r1, r3, #5
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	440b      	add	r3, r1
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	4619      	mov	r1, r3
 8004552:	4b78      	ldr	r3, [pc, #480]	; (8004734 <USB_EP0StartXfer+0x2b0>)
 8004554:	4013      	ands	r3, r2
 8004556:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	429a      	cmp	r2, r3
 8004562:	d903      	bls.n	800456c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	0151      	lsls	r1, r2, #5
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	440a      	add	r2, r1
 8004582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800458a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a2:	6939      	ldr	r1, [r7, #16]
 80045a4:	0148      	lsls	r0, r1, #5
 80045a6:	6979      	ldr	r1, [r7, #20]
 80045a8:	4401      	add	r1, r0
 80045aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045ae:	4313      	orrs	r3, r2
 80045b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d11e      	bne.n	80045f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d009      	beq.n	80045d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	461a      	mov	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e097      	b.n	8004726 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	440a      	add	r2, r1
 800460c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004610:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004614:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8083 	beq.w	8004726 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	6979      	ldr	r1, [r7, #20]
 8004638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800463c:	4313      	orrs	r3, r2
 800463e:	634b      	str	r3, [r1, #52]	; 0x34
 8004640:	e071      	b.n	8004726 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	0159      	lsls	r1, r3, #5
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	440b      	add	r3, r1
 8004658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465c:	4619      	mov	r1, r3
 800465e:	4b36      	ldr	r3, [pc, #216]	; (8004738 <USB_EP0StartXfer+0x2b4>)
 8004660:	4013      	ands	r3, r2
 8004662:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	0159      	lsls	r1, r3, #5
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	440b      	add	r3, r1
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	4619      	mov	r1, r3
 8004680:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <USB_EP0StartXfer+0x2b0>)
 8004682:	4013      	ands	r3, r2
 8004684:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d4:	6939      	ldr	r1, [r7, #16]
 80046d6:	0148      	lsls	r0, r1, #5
 80046d8:	6979      	ldr	r1, [r7, #20]
 80046da:	4401      	add	r1, r0
 80046dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046e0:	4313      	orrs	r3, r2
 80046e2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d10d      	bne.n	8004706 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6919      	ldr	r1, [r3, #16]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	460a      	mov	r2, r1
 8004704:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004720:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004724:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e007ffff 	.word	0xe007ffff
 8004738:	fff80000 	.word	0xfff80000

0800473c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d14a      	bne.n	80047f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800476e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004772:	f040 8086 	bne.w	8004882 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	7812      	ldrb	r2, [r2, #0]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	440a      	add	r2, r1
 8004790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004794:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004798:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	7812      	ldrb	r2, [r2, #0]
 80047ae:	0151      	lsls	r1, r2, #5
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	440a      	add	r2, r1
 80047b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3301      	adds	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d902      	bls.n	80047d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
          break;
 80047d2:	e056      	b.n	8004882 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ec:	d0e7      	beq.n	80047be <USB_EPStopXfer+0x82>
 80047ee:	e048      	b.n	8004882 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004808:	d13b      	bne.n	8004882 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	440a      	add	r2, r1
 8004824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004828:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800482c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	0151      	lsls	r1, r2, #5
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	440a      	add	r2, r1
 8004848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800484c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004850:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3301      	adds	r3, #1
 8004856:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f242 7210 	movw	r2, #10000	; 0x2710
 800485e:	4293      	cmp	r3, r2
 8004860:	d902      	bls.n	8004868 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
          break;
 8004866:	e00c      	b.n	8004882 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800487c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004880:	d0e7      	beq.n	8004852 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004882:	7dfb      	ldrb	r3, [r7, #23]
}
 8004884:	4618      	mov	r0, r3
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004890:	b480      	push	{r7}
 8004892:	b089      	sub	sp, #36	; 0x24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	460b      	mov	r3, r1
 80048a0:	71fb      	strb	r3, [r7, #7]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80048ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d123      	bne.n	80048fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048b6:	88bb      	ldrh	r3, [r7, #4]
 80048b8:	3303      	adds	r3, #3
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	e018      	b.n	80048f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	031a      	lsls	r2, r3, #12
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d0:	461a      	mov	r2, r3
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	3301      	adds	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	3301      	adds	r3, #1
 80048e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3301      	adds	r3, #1
 80048ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3e2      	bcc.n	80048c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3724      	adds	r7, #36	; 0x24
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800490c:	b480      	push	{r7}
 800490e:	b08b      	sub	sp, #44	; 0x2c
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004922:	88fb      	ldrh	r3, [r7, #6]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	b29b      	uxth	r3, r3
 8004928:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	e014      	b.n	8004962 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	601a      	str	r2, [r3, #0]
    pDest++;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	3301      	adds	r3, #1
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	3301      	adds	r3, #1
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	3301      	adds	r3, #1
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	3301      	adds	r3, #1
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	3301      	adds	r3, #1
 8004960:	623b      	str	r3, [r7, #32]
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	429a      	cmp	r2, r3
 8004968:	d3e6      	bcc.n	8004938 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800496a:	8bfb      	ldrh	r3, [r7, #30]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01e      	beq.n	80049ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497a:	461a      	mov	r2, r3
 800497c:	f107 0310 	add.w	r3, r7, #16
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	b2da      	uxtb	r2, r3
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	701a      	strb	r2, [r3, #0]
      i++;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	3301      	adds	r3, #1
 800499a:	623b      	str	r3, [r7, #32]
      pDest++;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	3301      	adds	r3, #1
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049a2:	8bfb      	ldrh	r3, [r7, #30]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049a8:	8bfb      	ldrh	r3, [r7, #30]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ea      	bne.n	8004984 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	372c      	adds	r7, #44	; 0x2c
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d12c      	bne.n	8004a32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db12      	blt.n	8004a10 <USB_EPSetStall+0x54>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00f      	beq.n	8004a10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	0151      	lsls	r1, r2, #5
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	440a      	add	r2, r1
 8004a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e02b      	b.n	8004a8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	db12      	blt.n	8004a6a <USB_EPSetStall+0xae>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00f      	beq.n	8004a6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	0151      	lsls	r1, r2, #5
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	440a      	add	r2, r1
 8004a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d128      	bne.n	8004b06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ad2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	791b      	ldrb	r3, [r3, #4]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d003      	beq.n	8004ae4 <USB_EPClearStall+0x4c>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	791b      	ldrb	r3, [r3, #4]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d138      	bne.n	8004b56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e027      	b.n	8004b56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	0151      	lsls	r1, r2, #5
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	440a      	add	r2, r1
 8004b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	791b      	ldrb	r3, [r3, #4]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d003      	beq.n	8004b36 <USB_EPClearStall+0x9e>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	791b      	ldrb	r3, [r3, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d10f      	bne.n	8004b56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	0151      	lsls	r1, r2, #5
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	440a      	add	r2, r1
 8004b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b98:	68f9      	ldr	r1, [r7, #12]
 8004b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bde:	f023 0302 	bic.w	r3, r3, #2
 8004be2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c0c:	f023 0303 	bic.w	r3, r3, #3
 8004c10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c20:	f043 0302 	orr.w	r3, r3, #2
 8004c24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	0c1b      	lsrs	r3, r3, #16
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	b29b      	uxth	r3, r3
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4013      	ands	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b087      	sub	sp, #28
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	460b      	mov	r3, r1
 8004d08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	01db      	lsls	r3, r3, #7
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0301 	and.w	r3, r3, #1
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	4619      	mov	r1, r3
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <USB_ActivateSetup+0x44>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	fffff800 	.word	0xfffff800

08004dc0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	333c      	adds	r3, #60	; 0x3c
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <USB_EP0_OutStart+0xb8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d90a      	bls.n	8004dfa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df4:	d101      	bne.n	8004dfa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e037      	b.n	8004e6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	461a      	mov	r2, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e28:	f043 0318 	orr.w	r3, r3, #24
 8004e2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004e42:	7afb      	ldrb	r3, [r7, #11]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d10f      	bne.n	8004e68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	461a      	mov	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004e66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	4f54300a 	.word	0x4f54300a

08004e7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a13      	ldr	r2, [pc, #76]	; (8004ee0 <USB_CoreReset+0x64>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e01b      	b.n	8004ed2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	daf2      	bge.n	8004e88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <USB_CoreReset+0x64>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d901      	bls.n	8004ec4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e006      	b.n	8004ed2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d0f0      	beq.n	8004eb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	00030d40 	.word	0x00030d40

08004ee4 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]


	UNUSED(cfgidx);
	  USBD_CDC_HandleTypeDef *hcdc;

	  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ef0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ef4:	f002 fd2a 	bl	800794c <malloc>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	60fb      	str	r3, [r7, #12]

	  if (hcdc == NULL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <USBD_CDC_Init+0x32>
	  {
	    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	32b0      	adds	r2, #176	; 0xb0
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    return (uint8_t)USBD_EMEM;
 8004f12:	2302      	movs	r3, #2
 8004f14:	e0d4      	b.n	80050c0 <USBD_CDC_Init+0x1dc>
	  }

	  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004f16:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f002 fd25 	bl	800796c <memset>

	  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	32b0      	adds	r2, #176	; 0xb0
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	32b0      	adds	r2, #176	; 0xb0
 8004f3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc


	  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7c1b      	ldrb	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d138      	bne.n	8004fc0 <USBD_CDC_Init+0xdc>
	  {
	    /* Open EP IN */
	    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f4e:	4b5e      	ldr	r3, [pc, #376]	; (80050c8 <USBD_CDC_Init+0x1e4>)
 8004f50:	7819      	ldrb	r1, [r3, #0]
 8004f52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f56:	2202      	movs	r2, #2
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f002 fb2a 	bl	80075b2 <USBD_LL_OpenEP>
	                         CDC_DATA_HS_IN_PACKET_SIZE);

	    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f5e:	4b5a      	ldr	r3, [pc, #360]	; (80050c8 <USBD_CDC_Init+0x1e4>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	f003 020f 	and.w	r2, r3, #15
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	3324      	adds	r3, #36	; 0x24
 8004f74:	2201      	movs	r2, #1
 8004f76:	801a      	strh	r2, [r3, #0]

	    /* Open EP OUT */
	    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f78:	4b54      	ldr	r3, [pc, #336]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8004f7a:	7819      	ldrb	r1, [r3, #0]
 8004f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f80:	2202      	movs	r2, #2
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f002 fb15 	bl	80075b2 <USBD_LL_OpenEP>
	                         CDC_DATA_HS_OUT_PACKET_SIZE);

	    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f88:	4b50      	ldr	r3, [pc, #320]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 020f 	and.w	r2, r3, #15
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	801a      	strh	r2, [r3, #0]

	    /* Set bInterval for CDC CMD Endpoint */
	    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004fa4:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <USBD_CDC_Init+0x1ec>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3326      	adds	r3, #38	; 0x26
 8004fba:	2210      	movs	r2, #16
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	e035      	b.n	800502c <USBD_CDC_Init+0x148>
	  }
	  else
	  {
	    /* Open EP IN */
	    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004fc0:	4b41      	ldr	r3, [pc, #260]	; (80050c8 <USBD_CDC_Init+0x1e4>)
 8004fc2:	7819      	ldrb	r1, [r3, #0]
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f002 faf2 	bl	80075b2 <USBD_LL_OpenEP>
	                         CDC_DATA_FS_IN_PACKET_SIZE);

	    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004fce:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <USBD_CDC_Init+0x1e4>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	f003 020f 	and.w	r2, r3, #15
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3324      	adds	r3, #36	; 0x24
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	801a      	strh	r2, [r3, #0]

	    /* Open EP OUT */
	    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004fe8:	4b38      	ldr	r3, [pc, #224]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8004fea:	7819      	ldrb	r1, [r3, #0]
 8004fec:	2340      	movs	r3, #64	; 0x40
 8004fee:	2202      	movs	r2, #2
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f002 fade 	bl	80075b2 <USBD_LL_OpenEP>
	                         CDC_DATA_FS_OUT_PACKET_SIZE);

	    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ff6:	4b35      	ldr	r3, [pc, #212]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	f003 020f 	and.w	r2, r3, #15
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800500e:	2201      	movs	r2, #1
 8005010:	801a      	strh	r2, [r3, #0]

	    /* Set bInterval for CMD Endpoint */
	    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005012:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <USBD_CDC_Init+0x1ec>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	f003 020f 	and.w	r2, r3, #15
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	3326      	adds	r3, #38	; 0x26
 8005028:	2210      	movs	r2, #16
 800502a:	801a      	strh	r2, [r3, #0]
	  }

	  /* Open Command IN EP */
	  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <USBD_CDC_Init+0x1ec>)
 800502e:	7819      	ldrb	r1, [r3, #0]
 8005030:	2308      	movs	r3, #8
 8005032:	2203      	movs	r2, #3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f002 fabc 	bl	80075b2 <USBD_LL_OpenEP>
	  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800503a:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <USBD_CDC_Init+0x1ec>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	3324      	adds	r3, #36	; 0x24
 8005050:	2201      	movs	r2, #1
 8005052:	801a      	strh	r2, [r3, #0]

	  hcdc->RxBuffer = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	  /* Init  physical Interface components */
	  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	33b0      	adds	r3, #176	; 0xb0
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4798      	blx	r3

	  /* Init Xfer states */
	  hcdc->TxState = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	  hcdc->RxState = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	  if (hcdc->RxBuffer == NULL)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <USBD_CDC_Init+0x1aa>
	  {
	    return (uint8_t)USBD_EMEM;
 800508a:	2302      	movs	r3, #2
 800508c:	e018      	b.n	80050c0 <USBD_CDC_Init+0x1dc>
	  }

	  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	7c1b      	ldrb	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <USBD_CDC_Init+0x1c8>
	  {
	    /* Prepare Out endpoint to receive next packet */
	    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005096:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <USBD_CDC_Init+0x1e8>)
 8005098:	7819      	ldrb	r1, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f002 fb73 	bl	8007790 <USBD_LL_PrepareReceive>
 80050aa:	e008      	b.n	80050be <USBD_CDC_Init+0x1da>
	                                 CDC_DATA_HS_OUT_PACKET_SIZE);
	  }
	  else
	  {
	    /* Prepare Out endpoint to receive next packet */
	    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050ac:	4b07      	ldr	r3, [pc, #28]	; (80050cc <USBD_CDC_Init+0x1e8>)
 80050ae:	7819      	ldrb	r1, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050b6:	2340      	movs	r3, #64	; 0x40
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f002 fb69 	bl	8007790 <USBD_LL_PrepareReceive>
	                                 CDC_DATA_FS_OUT_PACKET_SIZE);
	  }

	  return (uint8_t)USBD_OK;
 80050be:	2300      	movs	r3, #0
//    }
//
//
//  }
//  return ret;
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000070 	.word	0x20000070
 80050cc:	20000071 	.word	0x20000071
 80050d0:	20000072 	.word	0x20000072

080050d4 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]




	  /* Close EP IN */
	  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80050e0:	4b3a      	ldr	r3, [pc, #232]	; (80051cc <USBD_CDC_DeInit+0xf8>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f002 fa89 	bl	80075fe <USBD_LL_CloseEP>
	  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80050ec:	4b37      	ldr	r3, [pc, #220]	; (80051cc <USBD_CDC_DeInit+0xf8>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 020f 	and.w	r2, r3, #15
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3324      	adds	r3, #36	; 0x24
 8005102:	2200      	movs	r2, #0
 8005104:	801a      	strh	r2, [r3, #0]

	  /* Close EP OUT */
	  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005106:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <USBD_CDC_DeInit+0xfc>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f002 fa76 	bl	80075fe <USBD_LL_CloseEP>
	  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005112:	4b2f      	ldr	r3, [pc, #188]	; (80051d0 <USBD_CDC_DeInit+0xfc>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	f003 020f 	and.w	r2, r3, #15
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800512a:	2200      	movs	r2, #0
 800512c:	801a      	strh	r2, [r3, #0]

	  /* Close Command IN EP */
	  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800512e:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <USBD_CDC_DeInit+0x100>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f002 fa62 	bl	80075fe <USBD_LL_CloseEP>
	  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800513a:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <USBD_CDC_DeInit+0x100>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	f003 020f 	and.w	r2, r3, #15
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	2200      	movs	r2, #0
 8005152:	801a      	strh	r2, [r3, #0]
	  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <USBD_CDC_DeInit+0x100>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	f003 020f 	and.w	r2, r3, #15
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	3326      	adds	r3, #38	; 0x26
 800516a:	2200      	movs	r2, #0
 800516c:	801a      	strh	r2, [r3, #0]

	  /* DeInit  physical Interface components */
	  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	32b0      	adds	r2, #176	; 0xb0
 8005178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01f      	beq.n	80051c0 <USBD_CDC_DeInit+0xec>
	  {
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	33b0      	adds	r3, #176	; 0xb0
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4798      	blx	r3
	    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	32b0      	adds	r2, #176	; 0xb0
 800519e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f002 fbda 	bl	800795c <free>
	    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	32b0      	adds	r2, #176	; 0xb0
 80051b2:	2100      	movs	r1, #0
 80051b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    pdev->pClassData = NULL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	  }

	  return (uint8_t)USBD_OK;
 80051c0:	2300      	movs	r3, #0
//    USBD_free(pdev->pClassData);
//    pdev->pClassData = NULL;
//  }
//
//  return ret;
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20000070 	.word	0x20000070
 80051d0:	20000071 	.word	0x20000071
 80051d4:	20000072 	.word	0x20000072

080051d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]


	 USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	32b0      	adds	r2, #176	; 0xb0
 80051ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f0:	613b      	str	r3, [r7, #16]
	  uint16_t len;
	  uint8_t ifalt = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	737b      	strb	r3, [r7, #13]
	  uint16_t status_info = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	817b      	strh	r3, [r7, #10]
	  USBD_StatusTypeDef ret = USBD_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]

	  if (hcdc == NULL)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <USBD_CDC_Setup+0x30>
	  {
	    return (uint8_t)USBD_FAIL;
 8005204:	2303      	movs	r3, #3
 8005206:	e0bf      	b.n	8005388 <USBD_CDC_Setup+0x1b0>
	  }

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005210:	2b00      	cmp	r3, #0
 8005212:	d050      	beq.n	80052b6 <USBD_CDC_Setup+0xde>
 8005214:	2b20      	cmp	r3, #32
 8005216:	f040 80af 	bne.w	8005378 <USBD_CDC_Setup+0x1a0>
	  {
	    case USB_REQ_TYPE_CLASS:
	      if (req->wLength != 0U)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	88db      	ldrh	r3, [r3, #6]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d03a      	beq.n	8005298 <USBD_CDC_Setup+0xc0>
	      {
	        if ((req->bmRequest & 0x80U) != 0U)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b25b      	sxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	da1b      	bge.n	8005264 <USBD_CDC_Setup+0x8c>
	        {
	          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	33b0      	adds	r3, #176	; 0xb0
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	7850      	ldrb	r0, [r2, #1]
	                                                                           (uint8_t *)hcdc->data,
 8005242:	6939      	ldr	r1, [r7, #16]
	          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	88d2      	ldrh	r2, [r2, #6]
 8005248:	4798      	blx	r3
	                                                                           req->wLength);

	          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	88db      	ldrh	r3, [r3, #6]
 800524e:	2b07      	cmp	r3, #7
 8005250:	bf28      	it	cs
 8005252:	2307      	movcs	r3, #7
 8005254:	81fb      	strh	r3, [r7, #14]
	          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	89fa      	ldrh	r2, [r7, #14]
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 fd3f 	bl	8006ce0 <USBD_CtlSendData>
	      else
	      {
	        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
	                                                                         (uint8_t *)req, 0U);
	      }
	      break;
 8005262:	e090      	b.n	8005386 <USBD_CDC_Setup+0x1ae>
	          hcdc->CmdOpCode = req->bRequest;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	785a      	ldrb	r2, [r3, #1]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	88db      	ldrh	r3, [r3, #6]
 8005272:	2b3f      	cmp	r3, #63	; 0x3f
 8005274:	d803      	bhi.n	800527e <USBD_CDC_Setup+0xa6>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	88db      	ldrh	r3, [r3, #6]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	e000      	b.n	8005280 <USBD_CDC_Setup+0xa8>
 800527e:	2240      	movs	r2, #64	; 0x40
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005286:	6939      	ldr	r1, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800528e:	461a      	mov	r2, r3
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f001 fd51 	bl	8006d38 <USBD_CtlPrepareRx>
	      break;
 8005296:	e076      	b.n	8005386 <USBD_CDC_Setup+0x1ae>
	        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	33b0      	adds	r3, #176	; 0xb0
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	7850      	ldrb	r0, [r2, #1]
 80052ae:	2200      	movs	r2, #0
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4798      	blx	r3
	      break;
 80052b4:	e067      	b.n	8005386 <USBD_CDC_Setup+0x1ae>

	    case USB_REQ_TYPE_STANDARD:
	      switch (req->bRequest)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b0b      	cmp	r3, #11
 80052bc:	d851      	bhi.n	8005362 <USBD_CDC_Setup+0x18a>
 80052be:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <USBD_CDC_Setup+0xec>)
 80052c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c4:	080052f5 	.word	0x080052f5
 80052c8:	08005371 	.word	0x08005371
 80052cc:	08005363 	.word	0x08005363
 80052d0:	08005363 	.word	0x08005363
 80052d4:	08005363 	.word	0x08005363
 80052d8:	08005363 	.word	0x08005363
 80052dc:	08005363 	.word	0x08005363
 80052e0:	08005363 	.word	0x08005363
 80052e4:	08005363 	.word	0x08005363
 80052e8:	08005363 	.word	0x08005363
 80052ec:	0800531f 	.word	0x0800531f
 80052f0:	08005349 	.word	0x08005349
	      {
	        case USB_REQ_GET_STATUS:
	          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d107      	bne.n	8005310 <USBD_CDC_Setup+0x138>
	          {
	            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005300:	f107 030a 	add.w	r3, r7, #10
 8005304:	2202      	movs	r2, #2
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f001 fce9 	bl	8006ce0 <USBD_CtlSendData>
	          else
	          {
	            USBD_CtlError(pdev, req);
	            ret = USBD_FAIL;
	          }
	          break;
 800530e:	e032      	b.n	8005376 <USBD_CDC_Setup+0x19e>
	            USBD_CtlError(pdev, req);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f001 fc73 	bl	8006bfe <USBD_CtlError>
	            ret = USBD_FAIL;
 8005318:	2303      	movs	r3, #3
 800531a:	75fb      	strb	r3, [r7, #23]
	          break;
 800531c:	e02b      	b.n	8005376 <USBD_CDC_Setup+0x19e>

	        case USB_REQ_GET_INTERFACE:
	          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b03      	cmp	r3, #3
 8005328:	d107      	bne.n	800533a <USBD_CDC_Setup+0x162>
	          {
	            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800532a:	f107 030d 	add.w	r3, r7, #13
 800532e:	2201      	movs	r2, #1
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 fcd4 	bl	8006ce0 <USBD_CtlSendData>
	          else
	          {
	            USBD_CtlError(pdev, req);
	            ret = USBD_FAIL;
	          }
	          break;
 8005338:	e01d      	b.n	8005376 <USBD_CDC_Setup+0x19e>
	            USBD_CtlError(pdev, req);
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 fc5e 	bl	8006bfe <USBD_CtlError>
	            ret = USBD_FAIL;
 8005342:	2303      	movs	r3, #3
 8005344:	75fb      	strb	r3, [r7, #23]
	          break;
 8005346:	e016      	b.n	8005376 <USBD_CDC_Setup+0x19e>

	        case USB_REQ_SET_INTERFACE:
	          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b03      	cmp	r3, #3
 8005352:	d00f      	beq.n	8005374 <USBD_CDC_Setup+0x19c>
	          {
	            USBD_CtlError(pdev, req);
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 fc51 	bl	8006bfe <USBD_CtlError>
	            ret = USBD_FAIL;
 800535c:	2303      	movs	r3, #3
 800535e:	75fb      	strb	r3, [r7, #23]
	          }
	          break;
 8005360:	e008      	b.n	8005374 <USBD_CDC_Setup+0x19c>

	        case USB_REQ_CLEAR_FEATURE:
	          break;

	        default:
	          USBD_CtlError(pdev, req);
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 fc4a 	bl	8006bfe <USBD_CtlError>
	          ret = USBD_FAIL;
 800536a:	2303      	movs	r3, #3
 800536c:	75fb      	strb	r3, [r7, #23]
	          break;
 800536e:	e002      	b.n	8005376 <USBD_CDC_Setup+0x19e>
	          break;
 8005370:	bf00      	nop
 8005372:	e008      	b.n	8005386 <USBD_CDC_Setup+0x1ae>
	          break;
 8005374:	bf00      	nop
	      }
	      break;
 8005376:	e006      	b.n	8005386 <USBD_CDC_Setup+0x1ae>

	    default:
	      USBD_CtlError(pdev, req);
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 fc3f 	bl	8006bfe <USBD_CtlError>
	      ret = USBD_FAIL;
 8005380:	2303      	movs	r3, #3
 8005382:	75fb      	strb	r3, [r7, #23]
	      break;
 8005384:	bf00      	nop
	  }

	  return (uint8_t)ret;
 8005386:	7dfb      	ldrb	r3, [r7, #23]
//
//  default:
//    break;
//  }
//  return USBD_OK;
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]

	 USBD_CDC_HandleTypeDef *hcdc;
		  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80053a2:	60fb      	str	r3, [r7, #12]

		  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	32b0      	adds	r2, #176	; 0xb0
 80053ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <USBD_CDC_DataIn+0x2a>
		  {
		    return (uint8_t)USBD_FAIL;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e065      	b.n	8005486 <USBD_CDC_DataIn+0xf6>
		  }

		  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	32b0      	adds	r2, #176	; 0xb0
 80053c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c8:	60bb      	str	r3, [r7, #8]

		  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	f003 020f 	and.w	r2, r3, #15
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	3318      	adds	r3, #24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d02f      	beq.n	8005444 <USBD_CDC_DataIn+0xb4>
		      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3318      	adds	r3, #24
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	f003 010f 	and.w	r1, r3, #15
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	460b      	mov	r3, r1
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	440b      	add	r3, r1
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4403      	add	r3, r0
 800540c:	3348      	adds	r3, #72	; 0x48
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	fbb2 f1f3 	udiv	r1, r2, r3
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	1ad3      	subs	r3, r2, r3
		  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800541a:	2b00      	cmp	r3, #0
 800541c:	d112      	bne.n	8005444 <USBD_CDC_DataIn+0xb4>
		  {
		    /* Update the packet total length */
		    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	f003 020f 	and.w	r2, r3, #15
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	3318      	adds	r3, #24
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

		    /* Send ZLP */
		    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005436:	78f9      	ldrb	r1, [r7, #3]
 8005438:	2300      	movs	r3, #0
 800543a:	2200      	movs	r2, #0
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f002 f986 	bl	800774e <USBD_LL_Transmit>
 8005442:	e01f      	b.n	8005484 <USBD_CDC_DataIn+0xf4>
		  }
		  else
		  {
		    hcdc->TxState = 0U;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2200      	movs	r2, #0
 8005448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

		    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	33b0      	adds	r3, #176	; 0xb0
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d010      	beq.n	8005484 <USBD_CDC_DataIn+0xf4>
		    {
		      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	33b0      	adds	r3, #176	; 0xb0
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	4798      	blx	r3
		    }
		  }

		  return (uint8_t)USBD_OK;
 8005484:	2300      	movs	r3, #0
//  }
//  else
//  {
//    return USBD_FAIL;
//  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	460b      	mov	r3, r1
 8005498:	70fb      	strb	r3, [r7, #3]



	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	32b0      	adds	r2, #176	; 0xb0
 80054a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a8:	60fb      	str	r3, [r7, #12]

	   if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	32b0      	adds	r2, #176	; 0xb0
 80054b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <USBD_CDC_DataOut+0x32>
	   {
	     return (uint8_t)USBD_FAIL;
 80054bc:	2303      	movs	r3, #3
 80054be:	e01a      	b.n	80054f6 <USBD_CDC_DataOut+0x68>
	   }

	   /* Get the received data length */
	   hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f002 f984 	bl	80077d2 <USBD_LL_GetRxDataSize>
 80054ca:	4602      	mov	r2, r0
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	   /* USB data will be immediately processed, this allow next USB traffic being
	   NAKed till the end of the application Xfer */

	   ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	33b0      	adds	r3, #176	; 0xb0
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80054f0:	4611      	mov	r1, r2
 80054f2:	4798      	blx	r3

	   return (uint8_t)USBD_OK;
 80054f4:	2300      	movs	r3, #0
//  }
//  else
//  {
//    return USBD_FAIL;
//  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]

	 USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	32b0      	adds	r2, #176	; 0xb0
 8005510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005514:	60fb      	str	r3, [r7, #12]

	  if (hcdc == NULL)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <USBD_CDC_EP0_RxReady+0x22>
	  {
	    return (uint8_t)USBD_FAIL;
 800551c:	2303      	movs	r3, #3
 800551e:	e025      	b.n	800556c <USBD_CDC_EP0_RxReady+0x6e>
	  }

	  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	33b0      	adds	r3, #176	; 0xb0
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <USBD_CDC_EP0_RxReady+0x6c>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800553a:	2bff      	cmp	r3, #255	; 0xff
 800553c:	d015      	beq.n	800556a <USBD_CDC_EP0_RxReady+0x6c>
	  {
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	33b0      	adds	r3, #176	; 0xb0
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
	                                                                     (uint8_t *)hcdc->data,
 8005556:	68f9      	ldr	r1, [r7, #12]
	                                                                     (uint16_t)hcdc->CmdLength);
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
	    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800555e:	b292      	uxth	r2, r2
 8005560:	4798      	blx	r3
	    hcdc->CmdOpCode = 0xFFU;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	22ff      	movs	r2, #255	; 0xff
 8005566:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	  }

	  return (uint8_t)USBD_OK;
 800556a:	2300      	movs	r3, #0


}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

	 USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800557c:	2182      	movs	r1, #130	; 0x82
 800557e:	4818      	ldr	r0, [pc, #96]	; (80055e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005580:	f000 fcdb 	bl	8005f3a <USBD_GetEpDesc>
 8005584:	6178      	str	r0, [r7, #20]
	  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005586:	2101      	movs	r1, #1
 8005588:	4815      	ldr	r0, [pc, #84]	; (80055e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800558a:	f000 fcd6 	bl	8005f3a <USBD_GetEpDesc>
 800558e:	6138      	str	r0, [r7, #16]
	  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005590:	2181      	movs	r1, #129	; 0x81
 8005592:	4813      	ldr	r0, [pc, #76]	; (80055e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005594:	f000 fcd1 	bl	8005f3a <USBD_GetEpDesc>
 8005598:	60f8      	str	r0, [r7, #12]

	  if (pEpCmdDesc != NULL)
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <USBD_CDC_GetFSCfgDesc+0x32>
	  {
	    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2210      	movs	r2, #16
 80055a4:	719a      	strb	r2, [r3, #6]
	  }

	  if (pEpOutDesc != NULL)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d006      	beq.n	80055ba <USBD_CDC_GetFSCfgDesc+0x46>
	  {
	    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b4:	711a      	strb	r2, [r3, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	715a      	strb	r2, [r3, #5]
	  }

	  if (pEpInDesc != NULL)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d006      	beq.n	80055ce <USBD_CDC_GetFSCfgDesc+0x5a>
	  {
	    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c8:	711a      	strb	r2, [r3, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	715a      	strb	r2, [r3, #5]
	  }

	  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	801a      	strh	r2, [r3, #0]
	  return USBD_CDC_CfgDesc;
 80055d4:	4b02      	ldr	r3, [pc, #8]	; (80055e0 <USBD_CDC_GetFSCfgDesc+0x6c>)


//  *length = sizeof (USBD_CDC_CfgFSDesc);
//  return USBD_CDC_CfgFSDesc;
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000050 	.word	0x20000050

080055e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	220a      	movs	r2, #10
 80055f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80055f2:	4b03      	ldr	r3, [pc, #12]	; (8005600 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	2000000c 	.word	0x2000000c

08005604 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800560e:	2303      	movs	r3, #3
 8005610:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData[pdev->classId]= fops;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	33b0      	adds	r3, #176	; 0xb0
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	605a      	str	r2, [r3, #4]
    ret = USBD_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USBD_CDC_SetTxBuffer>:


uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint32_t length)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	32b0      	adds	r2, #176	; 0xb0
 8005652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005656:	617b      	str	r3, [r7, #20]
	  if (hcdc == NULL)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <USBD_CDC_SetTxBuffer+0x26>
	   {
	     return (uint8_t)USBD_FAIL;
 800565e:	2303      	movs	r3, #3
 8005660:	e008      	b.n	8005674 <USBD_CDC_SetTxBuffer+0x38>
	   }

	   hcdc->TxBuffer = pbuff;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	   hcdc->TxLength = length;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	   return (uint8_t)USBD_OK;
 8005672:	2300      	movs	r3, #0
//
//  hcdc->TxBuffer = pbuff;
//  hcdc->TxLength = length;
//
//  return USBD_OK;
}
 8005674:	4618      	mov	r0, r3
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]

	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	32b0      	adds	r2, #176	; 0xb0
 8005694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005698:	60fb      	str	r3, [r7, #12]

	  if (hcdc == NULL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <USBD_CDC_SetRxBuffer+0x24>
	  {
	    return (uint8_t)USBD_FAIL;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e004      	b.n	80056ae <USBD_CDC_SetRxBuffer+0x2e>
	  }

	  hcdc->RxBuffer = pbuff;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	  return (uint8_t)USBD_OK;
 80056ac:	2300      	movs	r3, #0
//  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
//
//  hcdc->RxBuffer = pbuff;
//
//  return USBD_OK;
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */

uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	32b0      	adds	r2, #176	; 0xb0
 80056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d2:	60bb      	str	r3, [r7, #8]


  USBD_StatusTypeDef ret = USBD_BUSY;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]

  if (hcdc == NULL)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80056de:	2303      	movs	r3, #3
 80056e0:	e025      	b.n	800572e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11f      	bne.n	800572c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80056f4:	4b10      	ldr	r3, [pc, #64]	; (8005738 <USBD_CDC_TransmitPacket+0x7c>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4403      	add	r3, r0
 800570e:	3318      	adds	r3, #24
 8005710:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005712:	4b09      	ldr	r3, [pc, #36]	; (8005738 <USBD_CDC_TransmitPacket+0x7c>)
 8005714:	7819      	ldrb	r1, [r3, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f002 f813 	bl	800774e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000070 	.word	0x20000070

0800573c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 // USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	32b0      	adds	r2, #176	; 0xb0
 800574e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005752:	60fb      	str	r3, [r7, #12]
  /* Suspend or Resume USB Out process */

	 if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	32b0      	adds	r2, #176	; 0xb0
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <USBD_CDC_ReceivePacket+0x2e>
	  {
	    return (uint8_t)USBD_FAIL;
 8005766:	2303      	movs	r3, #3
 8005768:	e018      	b.n	800579c <USBD_CDC_ReceivePacket+0x60>
	  }

	  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	7c1b      	ldrb	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <USBD_CDC_ReceivePacket+0x4c>
	  {
	    /* Prepare Out endpoint to receive next packet */
	    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005772:	4b0c      	ldr	r3, [pc, #48]	; (80057a4 <USBD_CDC_ReceivePacket+0x68>)
 8005774:	7819      	ldrb	r1, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800577c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f002 f805 	bl	8007790 <USBD_LL_PrepareReceive>
 8005786:	e008      	b.n	800579a <USBD_CDC_ReceivePacket+0x5e>
	                                 CDC_DATA_HS_OUT_PACKET_SIZE);
	  }
	  else
	  {
	    /* Prepare Out endpoint to receive next packet */
	    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <USBD_CDC_ReceivePacket+0x68>)
 800578a:	7819      	ldrb	r1, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005792:	2340      	movs	r3, #64	; 0x40
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fffb 	bl	8007790 <USBD_LL_PrepareReceive>
	                                 CDC_DATA_FS_OUT_PACKET_SIZE);
	  }

	  return (uint8_t)USBD_OK;
 800579a:	2300      	movs	r3, #0
//  }
//  else
//  {
//    return USBD_FAIL;
//  }
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000071 	.word	0x20000071

080057a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057bc:	2303      	movs	r3, #3
 80057be:	e01f      	b.n	8005800 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	79fa      	ldrb	r2, [r7, #7]
 80057f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f001 fe75 	bl	80074e4 <USBD_LL_Init>
 80057fa:	4603      	mov	r3, r0
 80057fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800581c:	2303      	movs	r3, #3
 800581e:	e025      	b.n	800586c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	32ae      	adds	r2, #174	; 0xae
 8005832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00f      	beq.n	800585c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	32ae      	adds	r2, #174	; 0xae
 8005846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	f107 020e 	add.w	r2, r7, #14
 8005850:	4610      	mov	r0, r2
 8005852:	4798      	blx	r3
 8005854:	4602      	mov	r2, r0
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 fe7d 	bl	800757c <USBD_LL_Start>
 8005882:	4603      	mov	r3, r0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005894:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	460b      	mov	r3, r1
 80058ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	4611      	mov	r1, r2
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4798      	blx	r3
 80058cc:	4603      	mov	r3, r0
 80058ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	4611      	mov	r1, r2
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005900:	2303      	movs	r3, #3
 8005902:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f001 f932 	bl	8006b8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005934:	461a      	mov	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	2b02      	cmp	r3, #2
 8005948:	d01a      	beq.n	8005980 <USBD_LL_SetupStage+0x72>
 800594a:	2b02      	cmp	r3, #2
 800594c:	d822      	bhi.n	8005994 <USBD_LL_SetupStage+0x86>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <USBD_LL_SetupStage+0x4a>
 8005952:	2b01      	cmp	r3, #1
 8005954:	d00a      	beq.n	800596c <USBD_LL_SetupStage+0x5e>
 8005956:	e01d      	b.n	8005994 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fb5f 	bl	8006024 <USBD_StdDevReq>
 8005966:	4603      	mov	r3, r0
 8005968:	73fb      	strb	r3, [r7, #15]
      break;
 800596a:	e020      	b.n	80059ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fbc7 	bl	8006108 <USBD_StdItfReq>
 800597a:	4603      	mov	r3, r0
 800597c:	73fb      	strb	r3, [r7, #15]
      break;
 800597e:	e016      	b.n	80059ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fc29 	bl	80061e0 <USBD_StdEPReq>
 800598e:	4603      	mov	r3, r0
 8005990:	73fb      	strb	r3, [r7, #15]
      break;
 8005992:	e00c      	b.n	80059ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800599a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fe4a 	bl	800763c <USBD_LL_StallEP>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]
      break;
 80059ac:	bf00      	nop
  }

  return ret;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	460b      	mov	r3, r1
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d16e      	bne.n	8005aae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059de:	2b03      	cmp	r3, #3
 80059e0:	f040 8098 	bne.w	8005b14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d913      	bls.n	8005a18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	1ad2      	subs	r2, r2, r3
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	4293      	cmp	r3, r2
 8005a08:	bf28      	it	cs
 8005a0a:	4613      	movcs	r3, r2
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f001 f9ae 	bl	8006d72 <USBD_CtlContinueRx>
 8005a16:	e07d      	b.n	8005b14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d014      	beq.n	8005a50 <USBD_LL_DataOutStage+0x98>
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d81d      	bhi.n	8005a66 <USBD_LL_DataOutStage+0xae>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <USBD_LL_DataOutStage+0x7c>
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d003      	beq.n	8005a3a <USBD_LL_DataOutStage+0x82>
 8005a32:	e018      	b.n	8005a66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	75bb      	strb	r3, [r7, #22]
            break;
 8005a38:	e018      	b.n	8005a6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fa5e 	bl	8005f06 <USBD_CoreFindIF>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	75bb      	strb	r3, [r7, #22]
            break;
 8005a4e:	e00d      	b.n	8005a6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	4619      	mov	r1, r3
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 fa60 	bl	8005f20 <USBD_CoreFindEP>
 8005a60:	4603      	mov	r3, r0
 8005a62:	75bb      	strb	r3, [r7, #22]
            break;
 8005a64:	e002      	b.n	8005a6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	75bb      	strb	r3, [r7, #22]
            break;
 8005a6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a6c:	7dbb      	ldrb	r3, [r7, #22]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d119      	bne.n	8005aa6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d113      	bne.n	8005aa6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a7e:	7dba      	ldrb	r2, [r7, #22]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	32ae      	adds	r2, #174	; 0xae
 8005a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a8e:	7dba      	ldrb	r2, [r7, #22]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a96:	7dba      	ldrb	r2, [r7, #22]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	32ae      	adds	r2, #174	; 0xae
 8005a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f001 f974 	bl	8006d94 <USBD_CtlSendStatus>
 8005aac:	e032      	b.n	8005b14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005aae:	7afb      	ldrb	r3, [r7, #11]
 8005ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 fa31 	bl	8005f20 <USBD_CoreFindEP>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ac2:	7dbb      	ldrb	r3, [r7, #22]
 8005ac4:	2bff      	cmp	r3, #255	; 0xff
 8005ac6:	d025      	beq.n	8005b14 <USBD_LL_DataOutStage+0x15c>
 8005ac8:	7dbb      	ldrb	r3, [r7, #22]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d122      	bne.n	8005b14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d117      	bne.n	8005b0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ada:	7dba      	ldrb	r2, [r7, #22]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	32ae      	adds	r2, #174	; 0xae
 8005ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00f      	beq.n	8005b0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005aea:	7dba      	ldrb	r2, [r7, #22]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005af2:	7dba      	ldrb	r2, [r7, #22]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	32ae      	adds	r2, #174	; 0xae
 8005af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	7afa      	ldrb	r2, [r7, #11]
 8005b00:	4611      	mov	r1, r2
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	4798      	blx	r3
 8005b06:	4603      	mov	r3, r0
 8005b08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	e000      	b.n	8005b16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b086      	sub	sp, #24
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	460b      	mov	r3, r1
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b2c:	7afb      	ldrb	r3, [r7, #11]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d16f      	bne.n	8005c12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3314      	adds	r3, #20
 8005b36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d15a      	bne.n	8005bf8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d914      	bls.n	8005b78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	1ad2      	subs	r2, r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f001 f8d6 	bl	8006d16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2100      	movs	r1, #0
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f001 fe0d 	bl	8007790 <USBD_LL_PrepareReceive>
 8005b76:	e03f      	b.n	8005bf8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d11c      	bne.n	8005bbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d316      	bcc.n	8005bbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d20f      	bcs.n	8005bbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f001 f8b7 	bl	8006d16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f001 fdea 	bl	8007790 <USBD_LL_PrepareReceive>
 8005bbc:	e01c      	b.n	8005bf8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d10f      	bne.n	8005bea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bea:	2180      	movs	r1, #128	; 0x80
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f001 fd25 	bl	800763c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f001 f8e1 	bl	8006dba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d03a      	beq.n	8005c78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff fe42 	bl	800588c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c10:	e032      	b.n	8005c78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f97f 	bl	8005f20 <USBD_CoreFindEP>
 8005c22:	4603      	mov	r3, r0
 8005c24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	2bff      	cmp	r3, #255	; 0xff
 8005c2a:	d025      	beq.n	8005c78 <USBD_LL_DataInStage+0x15a>
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d122      	bne.n	8005c78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d11c      	bne.n	8005c78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c3e:	7dfa      	ldrb	r2, [r7, #23]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	32ae      	adds	r2, #174	; 0xae
 8005c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d014      	beq.n	8005c78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c4e:	7dfa      	ldrb	r2, [r7, #23]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c56:	7dfa      	ldrb	r2, [r7, #23]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	32ae      	adds	r2, #174	; 0xae
 8005c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	7afa      	ldrb	r2, [r7, #11]
 8005c64:	4611      	mov	r1, r2
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	4798      	blx	r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c6e:	7dbb      	ldrb	r3, [r7, #22]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005c74:	7dbb      	ldrb	r3, [r7, #22]
 8005c76:	e000      	b.n	8005c7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00e      	beq.n	8005ce8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6852      	ldr	r2, [r2, #4]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	4611      	mov	r1, r2
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ce8:	2340      	movs	r3, #64	; 0x40
 8005cea:	2200      	movs	r2, #0
 8005cec:	2100      	movs	r1, #0
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 fc5f 	bl	80075b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2240      	movs	r2, #64	; 0x40
 8005d00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d04:	2340      	movs	r3, #64	; 0x40
 8005d06:	2200      	movs	r2, #0
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fc51 	bl	80075b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2240      	movs	r2, #64	; 0x40
 8005d1a:	621a      	str	r2, [r3, #32]

  return ret;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2204      	movs	r2, #4
 8005d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d106      	bne.n	8005d94 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b082      	sub	sp, #8
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d110      	bne.n	8005dd8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b082      	sub	sp, #8
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	460b      	mov	r3, r1
 8005dec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	32ae      	adds	r2, #174	; 0xae
 8005df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e01c      	b.n	8005e3e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d115      	bne.n	8005e3c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	32ae      	adds	r2, #174	; 0xae
 8005e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	32ae      	adds	r2, #174	; 0xae
 8005e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	78fa      	ldrb	r2, [r7, #3]
 8005e36:	4611      	mov	r1, r2
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	32ae      	adds	r2, #174	; 0xae
 8005e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e01c      	b.n	8005ea2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d115      	bne.n	8005ea0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	32ae      	adds	r2, #174	; 0xae
 8005e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	32ae      	adds	r2, #174	; 0xae
 8005e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	78fa      	ldrb	r2, [r7, #3]
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00e      	beq.n	8005efc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6852      	ldr	r2, [r2, #4]
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	4611      	mov	r1, r2
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	885b      	ldrh	r3, [r3, #2]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d920      	bls.n	8005fa4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f6a:	e013      	b.n	8005f94 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f6c:	f107 030a 	add.w	r3, r7, #10
 8005f70:	4619      	mov	r1, r3
 8005f72:	6978      	ldr	r0, [r7, #20]
 8005f74:	f000 f81b 	bl	8005fae <USBD_GetNextDesc>
 8005f78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d108      	bne.n	8005f94 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	789b      	ldrb	r3, [r3, #2]
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d008      	beq.n	8005fa2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	885b      	ldrh	r3, [r3, #2]
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	897b      	ldrh	r3, [r7, #10]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d8e5      	bhi.n	8005f6c <USBD_GetEpDesc+0x32>
 8005fa0:	e000      	b.n	8005fa4 <USBD_GetEpDesc+0x6a>
          break;
 8005fa2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fa4:	693b      	ldr	r3, [r7, #16]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	881a      	ldrh	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	4413      	add	r3, r2
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005fda:	68fb      	ldr	r3, [r7, #12]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006006:	8a3b      	ldrh	r3, [r7, #16]
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	b21a      	sxth	r2, r3
 800600c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006010:	4313      	orrs	r3, r2
 8006012:	b21b      	sxth	r3, r3
 8006014:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006016:	89fb      	ldrh	r3, [r7, #14]
}
 8006018:	4618      	mov	r0, r3
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d005      	beq.n	800604a <USBD_StdDevReq+0x26>
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d857      	bhi.n	80060f2 <USBD_StdDevReq+0xce>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00f      	beq.n	8006066 <USBD_StdDevReq+0x42>
 8006046:	2b20      	cmp	r3, #32
 8006048:	d153      	bne.n	80060f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	32ae      	adds	r2, #174	; 0xae
 8006054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
      break;
 8006064:	e04a      	b.n	80060fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	785b      	ldrb	r3, [r3, #1]
 800606a:	2b09      	cmp	r3, #9
 800606c:	d83b      	bhi.n	80060e6 <USBD_StdDevReq+0xc2>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <USBD_StdDevReq+0x50>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	080060c9 	.word	0x080060c9
 8006078:	080060dd 	.word	0x080060dd
 800607c:	080060e7 	.word	0x080060e7
 8006080:	080060d3 	.word	0x080060d3
 8006084:	080060e7 	.word	0x080060e7
 8006088:	080060a7 	.word	0x080060a7
 800608c:	0800609d 	.word	0x0800609d
 8006090:	080060e7 	.word	0x080060e7
 8006094:	080060bf 	.word	0x080060bf
 8006098:	080060b1 	.word	0x080060b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fa3c 	bl	800651c <USBD_GetDescriptor>
          break;
 80060a4:	e024      	b.n	80060f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fbcb 	bl	8006844 <USBD_SetAddress>
          break;
 80060ae:	e01f      	b.n	80060f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060b0:	6839      	ldr	r1, [r7, #0]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fc0a 	bl	80068cc <USBD_SetConfig>
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]
          break;
 80060bc:	e018      	b.n	80060f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fcad 	bl	8006a20 <USBD_GetConfig>
          break;
 80060c6:	e013      	b.n	80060f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fcde 	bl	8006a8c <USBD_GetStatus>
          break;
 80060d0:	e00e      	b.n	80060f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fd0d 	bl	8006af4 <USBD_SetFeature>
          break;
 80060da:	e009      	b.n	80060f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fd31 	bl	8006b46 <USBD_ClrFeature>
          break;
 80060e4:	e004      	b.n	80060f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fd88 	bl	8006bfe <USBD_CtlError>
          break;
 80060ee:	bf00      	nop
      }
      break;
 80060f0:	e004      	b.n	80060fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fd82 	bl	8006bfe <USBD_CtlError>
      break;
 80060fa:	bf00      	nop
  }

  return ret;
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop

08006108 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d005      	beq.n	800612e <USBD_StdItfReq+0x26>
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d852      	bhi.n	80061cc <USBD_StdItfReq+0xc4>
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <USBD_StdItfReq+0x26>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d14e      	bne.n	80061cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006134:	b2db      	uxtb	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	2b02      	cmp	r3, #2
 800613a:	d840      	bhi.n	80061be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	889b      	ldrh	r3, [r3, #4]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b01      	cmp	r3, #1
 8006144:	d836      	bhi.n	80061b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	889b      	ldrh	r3, [r3, #4]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fed9 	bl	8005f06 <USBD_CoreFindIF>
 8006154:	4603      	mov	r3, r0
 8006156:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	2bff      	cmp	r3, #255	; 0xff
 800615c:	d01d      	beq.n	800619a <USBD_StdItfReq+0x92>
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d11a      	bne.n	800619a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006164:	7bba      	ldrb	r2, [r7, #14]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	32ae      	adds	r2, #174	; 0xae
 800616a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00f      	beq.n	8006194 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006174:	7bba      	ldrb	r2, [r7, #14]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800617c:	7bba      	ldrb	r2, [r7, #14]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	32ae      	adds	r2, #174	; 0xae
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
 800618e:	4603      	mov	r3, r0
 8006190:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006192:	e004      	b.n	800619e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006194:	2303      	movs	r3, #3
 8006196:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006198:	e001      	b.n	800619e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800619a:	2303      	movs	r3, #3
 800619c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	88db      	ldrh	r3, [r3, #6]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d110      	bne.n	80061c8 <USBD_StdItfReq+0xc0>
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10d      	bne.n	80061c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fdf1 	bl	8006d94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061b2:	e009      	b.n	80061c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fd21 	bl	8006bfe <USBD_CtlError>
          break;
 80061bc:	e004      	b.n	80061c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fd1c 	bl	8006bfe <USBD_CtlError>
          break;
 80061c6:	e000      	b.n	80061ca <USBD_StdItfReq+0xc2>
          break;
 80061c8:	bf00      	nop
      }
      break;
 80061ca:	e004      	b.n	80061d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fd15 	bl	8006bfe <USBD_CtlError>
      break;
 80061d4:	bf00      	nop
  }

  return ret;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	889b      	ldrh	r3, [r3, #4]
 80061f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061fc:	2b40      	cmp	r3, #64	; 0x40
 80061fe:	d007      	beq.n	8006210 <USBD_StdEPReq+0x30>
 8006200:	2b40      	cmp	r3, #64	; 0x40
 8006202:	f200 817f 	bhi.w	8006504 <USBD_StdEPReq+0x324>
 8006206:	2b00      	cmp	r3, #0
 8006208:	d02a      	beq.n	8006260 <USBD_StdEPReq+0x80>
 800620a:	2b20      	cmp	r3, #32
 800620c:	f040 817a 	bne.w	8006504 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff fe83 	bl	8005f20 <USBD_CoreFindEP>
 800621a:	4603      	mov	r3, r0
 800621c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800621e:	7b7b      	ldrb	r3, [r7, #13]
 8006220:	2bff      	cmp	r3, #255	; 0xff
 8006222:	f000 8174 	beq.w	800650e <USBD_StdEPReq+0x32e>
 8006226:	7b7b      	ldrb	r3, [r7, #13]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f040 8170 	bne.w	800650e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800622e:	7b7a      	ldrb	r2, [r7, #13]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006236:	7b7a      	ldrb	r2, [r7, #13]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	32ae      	adds	r2, #174	; 0xae
 800623c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8163 	beq.w	800650e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006248:	7b7a      	ldrb	r2, [r7, #13]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	32ae      	adds	r2, #174	; 0xae
 800624e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
 800625a:	4603      	mov	r3, r0
 800625c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800625e:	e156      	b.n	800650e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b03      	cmp	r3, #3
 8006266:	d008      	beq.n	800627a <USBD_StdEPReq+0x9a>
 8006268:	2b03      	cmp	r3, #3
 800626a:	f300 8145 	bgt.w	80064f8 <USBD_StdEPReq+0x318>
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 809b 	beq.w	80063aa <USBD_StdEPReq+0x1ca>
 8006274:	2b01      	cmp	r3, #1
 8006276:	d03c      	beq.n	80062f2 <USBD_StdEPReq+0x112>
 8006278:	e13e      	b.n	80064f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d002      	beq.n	800628c <USBD_StdEPReq+0xac>
 8006286:	2b03      	cmp	r3, #3
 8006288:	d016      	beq.n	80062b8 <USBD_StdEPReq+0xd8>
 800628a:	e02c      	b.n	80062e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800628c:	7bbb      	ldrb	r3, [r7, #14]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00d      	beq.n	80062ae <USBD_StdEPReq+0xce>
 8006292:	7bbb      	ldrb	r3, [r7, #14]
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d00a      	beq.n	80062ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006298:	7bbb      	ldrb	r3, [r7, #14]
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f9cd 	bl	800763c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062a2:	2180      	movs	r1, #128	; 0x80
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f9c9 	bl	800763c <USBD_LL_StallEP>
 80062aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062ac:	e020      	b.n	80062f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fca4 	bl	8006bfe <USBD_CtlError>
              break;
 80062b6:	e01b      	b.n	80062f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	885b      	ldrh	r3, [r3, #2]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10e      	bne.n	80062de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00b      	beq.n	80062de <USBD_StdEPReq+0xfe>
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d008      	beq.n	80062de <USBD_StdEPReq+0xfe>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	88db      	ldrh	r3, [r3, #6]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 f9af 	bl	800763c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fd58 	bl	8006d94 <USBD_CtlSendStatus>

              break;
 80062e4:	e004      	b.n	80062f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fc88 	bl	8006bfe <USBD_CtlError>
              break;
 80062ee:	bf00      	nop
          }
          break;
 80062f0:	e107      	b.n	8006502 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d002      	beq.n	8006304 <USBD_StdEPReq+0x124>
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d016      	beq.n	8006330 <USBD_StdEPReq+0x150>
 8006302:	e04b      	b.n	800639c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <USBD_StdEPReq+0x146>
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d00a      	beq.n	8006326 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006310:	7bbb      	ldrb	r3, [r7, #14]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 f991 	bl	800763c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800631a:	2180      	movs	r1, #128	; 0x80
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 f98d 	bl	800763c <USBD_LL_StallEP>
 8006322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006324:	e040      	b.n	80063a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc68 	bl	8006bfe <USBD_CtlError>
              break;
 800632e:	e03b      	b.n	80063a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	885b      	ldrh	r3, [r3, #2]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d136      	bne.n	80063a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f997 	bl	800767a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fd21 	bl	8006d94 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff fde2 	bl	8005f20 <USBD_CoreFindEP>
 800635c:	4603      	mov	r3, r0
 800635e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006360:	7b7b      	ldrb	r3, [r7, #13]
 8006362:	2bff      	cmp	r3, #255	; 0xff
 8006364:	d01f      	beq.n	80063a6 <USBD_StdEPReq+0x1c6>
 8006366:	7b7b      	ldrb	r3, [r7, #13]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d11c      	bne.n	80063a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800636c:	7b7a      	ldrb	r2, [r7, #13]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006374:	7b7a      	ldrb	r2, [r7, #13]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	32ae      	adds	r2, #174	; 0xae
 800637a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d010      	beq.n	80063a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006384:	7b7a      	ldrb	r2, [r7, #13]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	32ae      	adds	r2, #174	; 0xae
 800638a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	6839      	ldr	r1, [r7, #0]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	4798      	blx	r3
 8006396:	4603      	mov	r3, r0
 8006398:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800639a:	e004      	b.n	80063a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fc2d 	bl	8006bfe <USBD_CtlError>
              break;
 80063a4:	e000      	b.n	80063a8 <USBD_StdEPReq+0x1c8>
              break;
 80063a6:	bf00      	nop
          }
          break;
 80063a8:	e0ab      	b.n	8006502 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d002      	beq.n	80063bc <USBD_StdEPReq+0x1dc>
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d032      	beq.n	8006420 <USBD_StdEPReq+0x240>
 80063ba:	e097      	b.n	80064ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <USBD_StdEPReq+0x1f2>
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	2b80      	cmp	r3, #128	; 0x80
 80063c6:	d004      	beq.n	80063d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fc17 	bl	8006bfe <USBD_CtlError>
                break;
 80063d0:	e091      	b.n	80064f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	da0b      	bge.n	80063f2 <USBD_StdEPReq+0x212>
 80063da:	7bbb      	ldrb	r3, [r7, #14]
 80063dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	3310      	adds	r3, #16
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	4413      	add	r3, r2
 80063ee:	3304      	adds	r3, #4
 80063f0:	e00b      	b.n	800640a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	3304      	adds	r3, #4
 800640a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2202      	movs	r2, #2
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fc61 	bl	8006ce0 <USBD_CtlSendData>
              break;
 800641e:	e06a      	b.n	80064f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006424:	2b00      	cmp	r3, #0
 8006426:	da11      	bge.n	800644c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	f003 020f 	and.w	r2, r3, #15
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	3324      	adds	r3, #36	; 0x24
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d117      	bne.n	8006472 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fbda 	bl	8006bfe <USBD_CtlError>
                  break;
 800644a:	e054      	b.n	80064f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	f003 020f 	and.w	r2, r3, #15
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d104      	bne.n	8006472 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fbc7 	bl	8006bfe <USBD_CtlError>
                  break;
 8006470:	e041      	b.n	80064f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006472:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006476:	2b00      	cmp	r3, #0
 8006478:	da0b      	bge.n	8006492 <USBD_StdEPReq+0x2b2>
 800647a:	7bbb      	ldrb	r3, [r7, #14]
 800647c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	3310      	adds	r3, #16
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	3304      	adds	r3, #4
 8006490:	e00b      	b.n	80064aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006498:	4613      	mov	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	4413      	add	r3, r2
 80064a8:	3304      	adds	r3, #4
 80064aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <USBD_StdEPReq+0x2d8>
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	2b80      	cmp	r3, #128	; 0x80
 80064b6:	d103      	bne.n	80064c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e00e      	b.n	80064de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 f8f7 	bl	80076b8 <USBD_LL_IsStallEP>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e002      	b.n	80064de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2202      	movs	r2, #2
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fbfb 	bl	8006ce0 <USBD_CtlSendData>
              break;
 80064ea:	e004      	b.n	80064f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fb85 	bl	8006bfe <USBD_CtlError>
              break;
 80064f4:	bf00      	nop
          }
          break;
 80064f6:	e004      	b.n	8006502 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fb7f 	bl	8006bfe <USBD_CtlError>
          break;
 8006500:	bf00      	nop
      }
      break;
 8006502:	e005      	b.n	8006510 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fb79 	bl	8006bfe <USBD_CtlError>
      break;
 800650c:	e000      	b.n	8006510 <USBD_StdEPReq+0x330>
      break;
 800650e:	bf00      	nop
  }

  return ret;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	885b      	ldrh	r3, [r3, #2]
 8006536:	0a1b      	lsrs	r3, r3, #8
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	2b0e      	cmp	r3, #14
 800653e:	f200 8152 	bhi.w	80067e6 <USBD_GetDescriptor+0x2ca>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <USBD_GetDescriptor+0x2c>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	080065b9 	.word	0x080065b9
 800654c:	080065d1 	.word	0x080065d1
 8006550:	08006611 	.word	0x08006611
 8006554:	080067e7 	.word	0x080067e7
 8006558:	080067e7 	.word	0x080067e7
 800655c:	08006787 	.word	0x08006787
 8006560:	080067b3 	.word	0x080067b3
 8006564:	080067e7 	.word	0x080067e7
 8006568:	080067e7 	.word	0x080067e7
 800656c:	080067e7 	.word	0x080067e7
 8006570:	080067e7 	.word	0x080067e7
 8006574:	080067e7 	.word	0x080067e7
 8006578:	080067e7 	.word	0x080067e7
 800657c:	080067e7 	.word	0x080067e7
 8006580:	08006585 	.word	0x08006585
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00b      	beq.n	80065a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	7c12      	ldrb	r2, [r2, #16]
 800659c:	f107 0108 	add.w	r1, r7, #8
 80065a0:	4610      	mov	r0, r2
 80065a2:	4798      	blx	r3
 80065a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80065a6:	e126      	b.n	80067f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fb27 	bl	8006bfe <USBD_CtlError>
        err++;
 80065b0:	7afb      	ldrb	r3, [r7, #11]
 80065b2:	3301      	adds	r3, #1
 80065b4:	72fb      	strb	r3, [r7, #11]
      break;
 80065b6:	e11e      	b.n	80067f6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	7c12      	ldrb	r2, [r2, #16]
 80065c4:	f107 0108 	add.w	r1, r7, #8
 80065c8:	4610      	mov	r0, r2
 80065ca:	4798      	blx	r3
 80065cc:	60f8      	str	r0, [r7, #12]
      break;
 80065ce:	e112      	b.n	80067f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	7c1b      	ldrb	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10d      	bne.n	80065f4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f107 0208 	add.w	r2, r7, #8
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
 80065e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	2202      	movs	r2, #2
 80065f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065f2:	e100      	b.n	80067f6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	f107 0208 	add.w	r2, r7, #8
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	2202      	movs	r2, #2
 800660c:	701a      	strb	r2, [r3, #0]
      break;
 800660e:	e0f2      	b.n	80067f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	885b      	ldrh	r3, [r3, #2]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b05      	cmp	r3, #5
 8006618:	f200 80ac 	bhi.w	8006774 <USBD_GetDescriptor+0x258>
 800661c:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <USBD_GetDescriptor+0x108>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	0800663d 	.word	0x0800663d
 8006628:	08006671 	.word	0x08006671
 800662c:	080066a5 	.word	0x080066a5
 8006630:	080066d9 	.word	0x080066d9
 8006634:	0800670d 	.word	0x0800670d
 8006638:	08006741 	.word	0x08006741
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	7c12      	ldrb	r2, [r2, #16]
 8006654:	f107 0108 	add.w	r1, r7, #8
 8006658:	4610      	mov	r0, r2
 800665a:	4798      	blx	r3
 800665c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800665e:	e091      	b.n	8006784 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 facb 	bl	8006bfe <USBD_CtlError>
            err++;
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	3301      	adds	r3, #1
 800666c:	72fb      	strb	r3, [r7, #11]
          break;
 800666e:	e089      	b.n	8006784 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	7c12      	ldrb	r2, [r2, #16]
 8006688:	f107 0108 	add.w	r1, r7, #8
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006692:	e077      	b.n	8006784 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fab1 	bl	8006bfe <USBD_CtlError>
            err++;
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	3301      	adds	r3, #1
 80066a0:	72fb      	strb	r3, [r7, #11]
          break;
 80066a2:	e06f      	b.n	8006784 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	7c12      	ldrb	r2, [r2, #16]
 80066bc:	f107 0108 	add.w	r1, r7, #8
 80066c0:	4610      	mov	r0, r2
 80066c2:	4798      	blx	r3
 80066c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c6:	e05d      	b.n	8006784 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa97 	bl	8006bfe <USBD_CtlError>
            err++;
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	3301      	adds	r3, #1
 80066d4:	72fb      	strb	r3, [r7, #11]
          break;
 80066d6:	e055      	b.n	8006784 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	7c12      	ldrb	r2, [r2, #16]
 80066f0:	f107 0108 	add.w	r1, r7, #8
 80066f4:	4610      	mov	r0, r2
 80066f6:	4798      	blx	r3
 80066f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fa:	e043      	b.n	8006784 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa7d 	bl	8006bfe <USBD_CtlError>
            err++;
 8006704:	7afb      	ldrb	r3, [r7, #11]
 8006706:	3301      	adds	r3, #1
 8006708:	72fb      	strb	r3, [r7, #11]
          break;
 800670a:	e03b      	b.n	8006784 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00b      	beq.n	8006730 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	7c12      	ldrb	r2, [r2, #16]
 8006724:	f107 0108 	add.w	r1, r7, #8
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
 800672c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672e:	e029      	b.n	8006784 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006730:	6839      	ldr	r1, [r7, #0]
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa63 	bl	8006bfe <USBD_CtlError>
            err++;
 8006738:	7afb      	ldrb	r3, [r7, #11]
 800673a:	3301      	adds	r3, #1
 800673c:	72fb      	strb	r3, [r7, #11]
          break;
 800673e:	e021      	b.n	8006784 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	7c12      	ldrb	r2, [r2, #16]
 8006758:	f107 0108 	add.w	r1, r7, #8
 800675c:	4610      	mov	r0, r2
 800675e:	4798      	blx	r3
 8006760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006762:	e00f      	b.n	8006784 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa49 	bl	8006bfe <USBD_CtlError>
            err++;
 800676c:	7afb      	ldrb	r3, [r7, #11]
 800676e:	3301      	adds	r3, #1
 8006770:	72fb      	strb	r3, [r7, #11]
          break;
 8006772:	e007      	b.n	8006784 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa41 	bl	8006bfe <USBD_CtlError>
          err++;
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	3301      	adds	r3, #1
 8006780:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006782:	bf00      	nop
      }
      break;
 8006784:	e037      	b.n	80067f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	7c1b      	ldrb	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	f107 0208 	add.w	r2, r7, #8
 800679a:	4610      	mov	r0, r2
 800679c:	4798      	blx	r3
 800679e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067a0:	e029      	b.n	80067f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fa2a 	bl	8006bfe <USBD_CtlError>
        err++;
 80067aa:	7afb      	ldrb	r3, [r7, #11]
 80067ac:	3301      	adds	r3, #1
 80067ae:	72fb      	strb	r3, [r7, #11]
      break;
 80067b0:	e021      	b.n	80067f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7c1b      	ldrb	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10d      	bne.n	80067d6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	f107 0208 	add.w	r2, r7, #8
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
 80067ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	2207      	movs	r2, #7
 80067d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d4:	e00f      	b.n	80067f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fa10 	bl	8006bfe <USBD_CtlError>
        err++;
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	3301      	adds	r3, #1
 80067e2:	72fb      	strb	r3, [r7, #11]
      break;
 80067e4:	e007      	b.n	80067f6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fa08 	bl	8006bfe <USBD_CtlError>
      err++;
 80067ee:	7afb      	ldrb	r3, [r7, #11]
 80067f0:	3301      	adds	r3, #1
 80067f2:	72fb      	strb	r3, [r7, #11]
      break;
 80067f4:	bf00      	nop
  }

  if (err != 0U)
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d11e      	bne.n	800683a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	88db      	ldrh	r3, [r3, #6]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d016      	beq.n	8006832 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006804:	893b      	ldrh	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88da      	ldrh	r2, [r3, #6]
 800680e:	893b      	ldrh	r3, [r7, #8]
 8006810:	4293      	cmp	r3, r2
 8006812:	bf28      	it	cs
 8006814:	4613      	movcs	r3, r2
 8006816:	b29b      	uxth	r3, r3
 8006818:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800681a:	893b      	ldrh	r3, [r7, #8]
 800681c:	461a      	mov	r2, r3
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fa5d 	bl	8006ce0 <USBD_CtlSendData>
 8006826:	e009      	b.n	800683c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9e7 	bl	8006bfe <USBD_CtlError>
 8006830:	e004      	b.n	800683c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 faae 	bl	8006d94 <USBD_CtlSendStatus>
 8006838:	e000      	b.n	800683c <USBD_GetDescriptor+0x320>
    return;
 800683a:	bf00      	nop
  }
}
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	889b      	ldrh	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d131      	bne.n	80068ba <USBD_SetAddress+0x76>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88db      	ldrh	r3, [r3, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d12d      	bne.n	80068ba <USBD_SetAddress+0x76>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	885b      	ldrh	r3, [r3, #2]
 8006862:	2b7f      	cmp	r3, #127	; 0x7f
 8006864:	d829      	bhi.n	80068ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	885b      	ldrh	r3, [r3, #2]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006870:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b03      	cmp	r3, #3
 800687c:	d104      	bne.n	8006888 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f9bc 	bl	8006bfe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006886:	e01d      	b.n	80068c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	7bfa      	ldrb	r2, [r7, #15]
 800688c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 ff3b 	bl	8007710 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa7a 	bl	8006d94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ae:	e009      	b.n	80068c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b8:	e004      	b.n	80068c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f99e 	bl	8006bfe <USBD_CtlError>
  }
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	885b      	ldrh	r3, [r3, #2]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	4b4e      	ldr	r3, [pc, #312]	; (8006a1c <USBD_SetConfig+0x150>)
 80068e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068e4:	4b4d      	ldr	r3, [pc, #308]	; (8006a1c <USBD_SetConfig+0x150>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d905      	bls.n	80068f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f985 	bl	8006bfe <USBD_CtlError>
    return USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e08c      	b.n	8006a12 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d002      	beq.n	800690a <USBD_SetConfig+0x3e>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d029      	beq.n	800695c <USBD_SetConfig+0x90>
 8006908:	e075      	b.n	80069f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800690a:	4b44      	ldr	r3, [pc, #272]	; (8006a1c <USBD_SetConfig+0x150>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d020      	beq.n	8006954 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006912:	4b42      	ldr	r3, [pc, #264]	; (8006a1c <USBD_SetConfig+0x150>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800691c:	4b3f      	ldr	r3, [pc, #252]	; (8006a1c <USBD_SetConfig+0x150>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fe ffbd 	bl	80058a2 <USBD_SetClassConfig>
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d008      	beq.n	8006944 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f962 	bl	8006bfe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006942:	e065      	b.n	8006a10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fa25 	bl	8006d94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2203      	movs	r2, #3
 800694e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006952:	e05d      	b.n	8006a10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa1d 	bl	8006d94 <USBD_CtlSendStatus>
      break;
 800695a:	e059      	b.n	8006a10 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800695c:	4b2f      	ldr	r3, [pc, #188]	; (8006a1c <USBD_SetConfig+0x150>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d112      	bne.n	800698a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800696c:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <USBD_SetConfig+0x150>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006976:	4b29      	ldr	r3, [pc, #164]	; (8006a1c <USBD_SetConfig+0x150>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7fe ffac 	bl	80058da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa06 	bl	8006d94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006988:	e042      	b.n	8006a10 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800698a:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <USBD_SetConfig+0x150>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d02a      	beq.n	80069ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7fe ff9a 	bl	80058da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069a6:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <USBD_SetConfig+0x150>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069b0:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <USBD_SetConfig+0x150>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fe ff73 	bl	80058a2 <USBD_SetClassConfig>
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00f      	beq.n	80069e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f918 	bl	8006bfe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fe ff7f 	bl	80058da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069e4:	e014      	b.n	8006a10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f9d4 	bl	8006d94 <USBD_CtlSendStatus>
      break;
 80069ec:	e010      	b.n	8006a10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f9d0 	bl	8006d94 <USBD_CtlSendStatus>
      break;
 80069f4:	e00c      	b.n	8006a10 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f900 	bl	8006bfe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <USBD_SetConfig+0x150>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fe ff68 	bl	80058da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0e:	bf00      	nop
  }

  return ret;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000170 	.word	0x20000170

08006a20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	88db      	ldrh	r3, [r3, #6]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d004      	beq.n	8006a3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8e2 	bl	8006bfe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a3a:	e023      	b.n	8006a84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	dc02      	bgt.n	8006a4e <USBD_GetConfig+0x2e>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dc03      	bgt.n	8006a54 <USBD_GetConfig+0x34>
 8006a4c:	e015      	b.n	8006a7a <USBD_GetConfig+0x5a>
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d00b      	beq.n	8006a6a <USBD_GetConfig+0x4a>
 8006a52:	e012      	b.n	8006a7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	2201      	movs	r2, #1
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f93c 	bl	8006ce0 <USBD_CtlSendData>
        break;
 8006a68:	e00c      	b.n	8006a84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f934 	bl	8006ce0 <USBD_CtlSendData>
        break;
 8006a78:	e004      	b.n	8006a84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f8be 	bl	8006bfe <USBD_CtlError>
        break;
 8006a82:	bf00      	nop
}
 8006a84:	bf00      	nop
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d81e      	bhi.n	8006ae2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	88db      	ldrh	r3, [r3, #6]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d004      	beq.n	8006ab6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f8a5 	bl	8006bfe <USBD_CtlError>
        break;
 8006ab4:	e01a      	b.n	8006aec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f043 0202 	orr.w	r2, r3, #2
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f900 	bl	8006ce0 <USBD_CtlSendData>
      break;
 8006ae0:	e004      	b.n	8006aec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f88a 	bl	8006bfe <USBD_CtlError>
      break;
 8006aea:	bf00      	nop
  }
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	885b      	ldrh	r3, [r3, #2]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d107      	bne.n	8006b16 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f940 	bl	8006d94 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b14:	e013      	b.n	8006b3e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	885b      	ldrh	r3, [r3, #2]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d10b      	bne.n	8006b36 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	889b      	ldrh	r3, [r3, #4]
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f930 	bl	8006d94 <USBD_CtlSendStatus>
}
 8006b34:	e003      	b.n	8006b3e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f860 	bl	8006bfe <USBD_CtlError>
}
 8006b3e:	bf00      	nop
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d80b      	bhi.n	8006b76 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d10c      	bne.n	8006b80 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f910 	bl	8006d94 <USBD_CtlSendStatus>
      }
      break;
 8006b74:	e004      	b.n	8006b80 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f840 	bl	8006bfe <USBD_CtlError>
      break;
 8006b7e:	e000      	b.n	8006b82 <USBD_ClrFeature+0x3c>
      break;
 8006b80:	bf00      	nop
  }
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	781a      	ldrb	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff fa17 	bl	8005fe8 <SWAPBYTE>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fa0a 	bl	8005fe8 <SWAPBYTE>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3301      	adds	r3, #1
 8006be6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff f9fd 	bl	8005fe8 <SWAPBYTE>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	80da      	strh	r2, [r3, #6]
}
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c08:	2180      	movs	r1, #128	; 0x80
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fd16 	bl	800763c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c10:	2100      	movs	r1, #0
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fd12 	bl	800763c <USBD_LL_StallEP>
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d036      	beq.n	8006ca4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c3a:	6938      	ldr	r0, [r7, #16]
 8006c3c:	f000 f836 	bl	8006cac <USBD_GetLen>
 8006c40:	4603      	mov	r3, r0
 8006c42:	3301      	adds	r3, #1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	4413      	add	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	4413      	add	r3, r2
 8006c66:	2203      	movs	r2, #3
 8006c68:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c70:	e013      	b.n	8006c9a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	4413      	add	r3, r2
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	7812      	ldrb	r2, [r2, #0]
 8006c7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3301      	adds	r3, #1
 8006c82:	613b      	str	r3, [r7, #16]
    idx++;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	3301      	adds	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	4413      	add	r3, r2
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	3301      	adds	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e7      	bne.n	8006c72 <USBD_GetString+0x52>
 8006ca2:	e000      	b.n	8006ca6 <USBD_GetString+0x86>
    return;
 8006ca4:	bf00      	nop
  }
}
 8006ca6:	3718      	adds	r7, #24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cbc:	e005      	b.n	8006cca <USBD_GetLen+0x1e>
  {
    len++;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1f5      	bne.n	8006cbe <USBD_GetLen+0x12>
  }

  return len;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	2100      	movs	r1, #0
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fd21 	bl	800774e <USBD_LL_Transmit>

  return USBD_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	2100      	movs	r1, #0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fd10 	bl	800774e <USBD_LL_Transmit>

  return USBD_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2203      	movs	r2, #3
 8006d48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	2100      	movs	r1, #0
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 fd14 	bl	8007790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	2100      	movs	r1, #0
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 fd03 	bl	8007790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2204      	movs	r2, #4
 8006da0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006da4:	2300      	movs	r3, #0
 8006da6:	2200      	movs	r2, #0
 8006da8:	2100      	movs	r1, #0
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fccf 	bl	800774e <USBD_LL_Transmit>

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2205      	movs	r2, #5
 8006dc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2100      	movs	r1, #0
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fcdd 	bl	8007790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006de4:	2200      	movs	r2, #0
 8006de6:	4912      	ldr	r1, [pc, #72]	; (8006e30 <MX_USB_DEVICE_Init+0x50>)
 8006de8:	4812      	ldr	r0, [pc, #72]	; (8006e34 <MX_USB_DEVICE_Init+0x54>)
 8006dea:	f7fe fcdd 	bl	80057a8 <USBD_Init>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006df4:	f7f9 fc40 	bl	8000678 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006df8:	490f      	ldr	r1, [pc, #60]	; (8006e38 <MX_USB_DEVICE_Init+0x58>)
 8006dfa:	480e      	ldr	r0, [pc, #56]	; (8006e34 <MX_USB_DEVICE_Init+0x54>)
 8006dfc:	f7fe fd04 	bl	8005808 <USBD_RegisterClass>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e06:	f7f9 fc37 	bl	8000678 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e0a:	490c      	ldr	r1, [pc, #48]	; (8006e3c <MX_USB_DEVICE_Init+0x5c>)
 8006e0c:	4809      	ldr	r0, [pc, #36]	; (8006e34 <MX_USB_DEVICE_Init+0x54>)
 8006e0e:	f7fe fbf9 	bl	8005604 <USBD_CDC_RegisterInterface>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e18:	f7f9 fc2e 	bl	8000678 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e1c:	4805      	ldr	r0, [pc, #20]	; (8006e34 <MX_USB_DEVICE_Init+0x54>)
 8006e1e:	f7fe fd29 	bl	8005874 <USBD_Start>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e28:	f7f9 fc26 	bl	8000678 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e2c:	bf00      	nop
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20000088 	.word	0x20000088
 8006e34:	20000174 	.word	0x20000174
 8006e38:	20000018 	.word	0x20000018
 8006e3c:	20000074 	.word	0x20000074

08006e40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e44:	2200      	movs	r2, #0
 8006e46:	4905      	ldr	r1, [pc, #20]	; (8006e5c <CDC_Init_FS+0x1c>)
 8006e48:	4805      	ldr	r0, [pc, #20]	; (8006e60 <CDC_Init_FS+0x20>)
 8006e4a:	f7fe fbf7 	bl	800563c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e4e:	4905      	ldr	r1, [pc, #20]	; (8006e64 <CDC_Init_FS+0x24>)
 8006e50:	4803      	ldr	r0, [pc, #12]	; (8006e60 <CDC_Init_FS+0x20>)
 8006e52:	f7fe fc15 	bl	8005680 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20000c50 	.word	0x20000c50
 8006e60:	20000174 	.word	0x20000174
 8006e64:	20000450 	.word	0x20000450

08006e68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	6039      	str	r1, [r7, #0]
 8006e82:	71fb      	strb	r3, [r7, #7]
 8006e84:	4613      	mov	r3, r2
 8006e86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e88:	79fb      	ldrb	r3, [r7, #7]
 8006e8a:	2b23      	cmp	r3, #35	; 0x23
 8006e8c:	d84a      	bhi.n	8006f24 <CDC_Control_FS+0xac>
 8006e8e:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <CDC_Control_FS+0x1c>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006f25 	.word	0x08006f25
 8006e98:	08006f25 	.word	0x08006f25
 8006e9c:	08006f25 	.word	0x08006f25
 8006ea0:	08006f25 	.word	0x08006f25
 8006ea4:	08006f25 	.word	0x08006f25
 8006ea8:	08006f25 	.word	0x08006f25
 8006eac:	08006f25 	.word	0x08006f25
 8006eb0:	08006f25 	.word	0x08006f25
 8006eb4:	08006f25 	.word	0x08006f25
 8006eb8:	08006f25 	.word	0x08006f25
 8006ebc:	08006f25 	.word	0x08006f25
 8006ec0:	08006f25 	.word	0x08006f25
 8006ec4:	08006f25 	.word	0x08006f25
 8006ec8:	08006f25 	.word	0x08006f25
 8006ecc:	08006f25 	.word	0x08006f25
 8006ed0:	08006f25 	.word	0x08006f25
 8006ed4:	08006f25 	.word	0x08006f25
 8006ed8:	08006f25 	.word	0x08006f25
 8006edc:	08006f25 	.word	0x08006f25
 8006ee0:	08006f25 	.word	0x08006f25
 8006ee4:	08006f25 	.word	0x08006f25
 8006ee8:	08006f25 	.word	0x08006f25
 8006eec:	08006f25 	.word	0x08006f25
 8006ef0:	08006f25 	.word	0x08006f25
 8006ef4:	08006f25 	.word	0x08006f25
 8006ef8:	08006f25 	.word	0x08006f25
 8006efc:	08006f25 	.word	0x08006f25
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f25 	.word	0x08006f25
 8006f08:	08006f25 	.word	0x08006f25
 8006f0c:	08006f25 	.word	0x08006f25
 8006f10:	08006f25 	.word	0x08006f25
 8006f14:	08006f25 	.word	0x08006f25
 8006f18:	08006f25 	.word	0x08006f25
 8006f1c:	08006f25 	.word	0x08006f25
 8006f20:	08006f25 	.word	0x08006f25
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f24:	bf00      	nop
  }

  return (USBD_OK);
 8006f26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4808      	ldr	r0, [pc, #32]	; (8006f64 <CDC_Receive_FS+0x30>)
 8006f42:	f7fe fb9d 	bl	8005680 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f46:	4807      	ldr	r0, [pc, #28]	; (8006f64 <CDC_Receive_FS+0x30>)
 8006f48:	f7fe fbf8 	bl	800573c <USBD_CDC_ReceivePacket>

  CDC_Transmit_FS(Buf, *Len);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f807 	bl	8006f68 <CDC_Transmit_FS>
  return (USBD_OK);
 8006f5a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000174 	.word	0x20000174

08006f68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f78:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <CDC_Transmit_FS+0x48>)
 8006f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e00b      	b.n	8006fa6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f8e:	887b      	ldrh	r3, [r7, #2]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	4806      	ldr	r0, [pc, #24]	; (8006fb0 <CDC_Transmit_FS+0x48>)
 8006f96:	f7fe fb51 	bl	800563c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f9a:	4805      	ldr	r0, [pc, #20]	; (8006fb0 <CDC_Transmit_FS+0x48>)
 8006f9c:	f7fe fb8e 	bl	80056bc <USBD_CDC_TransmitPacket>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000174 	.word	0x20000174

08006fb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
	...

08006fd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2212      	movs	r2, #18
 8006fe8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fea:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	200000a8 	.word	0x200000a8

08006ffc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	6039      	str	r1, [r7, #0]
 8007006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2204      	movs	r2, #4
 800700c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800700e:	4b03      	ldr	r3, [pc, #12]	; (800701c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	200000c8 	.word	0x200000c8

08007020 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d105      	bne.n	800703e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	4907      	ldr	r1, [pc, #28]	; (8007054 <USBD_FS_ProductStrDescriptor+0x34>)
 8007036:	4808      	ldr	r0, [pc, #32]	; (8007058 <USBD_FS_ProductStrDescriptor+0x38>)
 8007038:	f7ff fdf2 	bl	8006c20 <USBD_GetString>
 800703c:	e004      	b.n	8007048 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4904      	ldr	r1, [pc, #16]	; (8007054 <USBD_FS_ProductStrDescriptor+0x34>)
 8007042:	4805      	ldr	r0, [pc, #20]	; (8007058 <USBD_FS_ProductStrDescriptor+0x38>)
 8007044:	f7ff fdec 	bl	8006c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007048:	4b02      	ldr	r3, [pc, #8]	; (8007054 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800704a:	4618      	mov	r0, r3
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20001450 	.word	0x20001450
 8007058:	08007b90 	.word	0x08007b90

0800705c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	4904      	ldr	r1, [pc, #16]	; (800707c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800706c:	4804      	ldr	r0, [pc, #16]	; (8007080 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800706e:	f7ff fdd7 	bl	8006c20 <USBD_GetString>
  return USBD_StrDesc;
 8007072:	4b02      	ldr	r3, [pc, #8]	; (800707c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20001450 	.word	0x20001450
 8007080:	08007ba4 	.word	0x08007ba4

08007084 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	6039      	str	r1, [r7, #0]
 800708e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	221a      	movs	r2, #26
 8007094:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007096:	f000 f855 	bl	8007144 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800709a:	4b02      	ldr	r3, [pc, #8]	; (80070a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800709c:	4618      	mov	r0, r3
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	200000cc 	.word	0x200000cc

080070a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	6039      	str	r1, [r7, #0]
 80070b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	4907      	ldr	r1, [pc, #28]	; (80070dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80070be:	4808      	ldr	r0, [pc, #32]	; (80070e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070c0:	f7ff fdae 	bl	8006c20 <USBD_GetString>
 80070c4:	e004      	b.n	80070d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	4904      	ldr	r1, [pc, #16]	; (80070dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80070ca:	4805      	ldr	r0, [pc, #20]	; (80070e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070cc:	f7ff fda8 	bl	8006c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070d0:	4b02      	ldr	r3, [pc, #8]	; (80070dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20001450 	.word	0x20001450
 80070e0:	08007bb8 	.word	0x08007bb8

080070e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d105      	bne.n	8007102 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	4907      	ldr	r1, [pc, #28]	; (8007118 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070fa:	4808      	ldr	r0, [pc, #32]	; (800711c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070fc:	f7ff fd90 	bl	8006c20 <USBD_GetString>
 8007100:	e004      	b.n	800710c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	4904      	ldr	r1, [pc, #16]	; (8007118 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007106:	4805      	ldr	r0, [pc, #20]	; (800711c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007108:	f7ff fd8a 	bl	8006c20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800710c:	4b02      	ldr	r3, [pc, #8]	; (8007118 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20001450 	.word	0x20001450
 800711c:	08007bc4 	.word	0x08007bc4

08007120 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	220c      	movs	r2, #12
 8007130:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007132:	4b03      	ldr	r3, [pc, #12]	; (8007140 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	200000bc 	.word	0x200000bc

08007144 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800714a:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <Get_SerialNum+0x44>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007150:	4b0e      	ldr	r3, [pc, #56]	; (800718c <Get_SerialNum+0x48>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007156:	4b0e      	ldr	r3, [pc, #56]	; (8007190 <Get_SerialNum+0x4c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4413      	add	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800716a:	2208      	movs	r2, #8
 800716c:	4909      	ldr	r1, [pc, #36]	; (8007194 <Get_SerialNum+0x50>)
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f814 	bl	800719c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007174:	2204      	movs	r2, #4
 8007176:	4908      	ldr	r1, [pc, #32]	; (8007198 <Get_SerialNum+0x54>)
 8007178:	68b8      	ldr	r0, [r7, #8]
 800717a:	f000 f80f 	bl	800719c <IntToUnicode>
  }
}
 800717e:	bf00      	nop
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	1ff0f420 	.word	0x1ff0f420
 800718c:	1ff0f424 	.word	0x1ff0f424
 8007190:	1ff0f428 	.word	0x1ff0f428
 8007194:	200000ce 	.word	0x200000ce
 8007198:	200000de 	.word	0x200000de

0800719c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	4613      	mov	r3, r2
 80071a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80071ae:	2300      	movs	r3, #0
 80071b0:	75fb      	strb	r3, [r7, #23]
 80071b2:	e027      	b.n	8007204 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	0f1b      	lsrs	r3, r3, #28
 80071b8:	2b09      	cmp	r3, #9
 80071ba:	d80b      	bhi.n	80071d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	0f1b      	lsrs	r3, r3, #28
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	4619      	mov	r1, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	440b      	add	r3, r1
 80071cc:	3230      	adds	r2, #48	; 0x30
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	e00a      	b.n	80071ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	0f1b      	lsrs	r3, r3, #28
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4619      	mov	r1, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	440b      	add	r3, r1
 80071e4:	3237      	adds	r2, #55	; 0x37
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	3301      	adds	r3, #1
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	4413      	add	r3, r2
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	3301      	adds	r3, #1
 8007202:	75fb      	strb	r3, [r7, #23]
 8007204:	7dfa      	ldrb	r2, [r7, #23]
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	429a      	cmp	r2, r3
 800720a:	d3d3      	bcc.n	80071b4 <IntToUnicode+0x18>
  }
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b0ae      	sub	sp, #184	; 0xb8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007224:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	609a      	str	r2, [r3, #8]
 8007230:	60da      	str	r2, [r3, #12]
 8007232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007234:	f107 0314 	add.w	r3, r7, #20
 8007238:	2290      	movs	r2, #144	; 0x90
 800723a:	2100      	movs	r1, #0
 800723c:	4618      	mov	r0, r3
 800723e:	f000 fb95 	bl	800796c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800724a:	d151      	bne.n	80072f0 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800724c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007250:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8007252:	2300      	movs	r3, #0
 8007254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007258:	f107 0314 	add.w	r3, r7, #20
 800725c:	4618      	mov	r0, r3
 800725e:	f7fb fdcd 	bl	8002dfc <HAL_RCCEx_PeriphCLKConfig>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8007268:	f7f9 fa06 	bl	8000678 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800726c:	4b22      	ldr	r3, [pc, #136]	; (80072f8 <HAL_PCD_MspInit+0xdc>)
 800726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007270:	4a21      	ldr	r2, [pc, #132]	; (80072f8 <HAL_PCD_MspInit+0xdc>)
 8007272:	f043 0301 	orr.w	r3, r3, #1
 8007276:	6313      	str	r3, [r2, #48]	; 0x30
 8007278:	4b1f      	ldr	r3, [pc, #124]	; (80072f8 <HAL_PCD_MspInit+0xdc>)
 800727a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	613b      	str	r3, [r7, #16]
 8007282:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007284:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800728c:	2302      	movs	r3, #2
 800728e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007292:	2300      	movs	r3, #0
 8007294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007298:	2303      	movs	r3, #3
 800729a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800729e:	230a      	movs	r3, #10
 80072a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80072a8:	4619      	mov	r1, r3
 80072aa:	4814      	ldr	r0, [pc, #80]	; (80072fc <HAL_PCD_MspInit+0xe0>)
 80072ac:	f7f9 fc46 	bl	8000b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072b0:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <HAL_PCD_MspInit+0xdc>)
 80072b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b4:	4a10      	ldr	r2, [pc, #64]	; (80072f8 <HAL_PCD_MspInit+0xdc>)
 80072b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ba:	6353      	str	r3, [r2, #52]	; 0x34
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <HAL_PCD_MspInit+0xdc>)
 80072be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <HAL_PCD_MspInit+0xdc>)
 80072ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072cc:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <HAL_PCD_MspInit+0xdc>)
 80072ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072d2:	6453      	str	r3, [r2, #68]	; 0x44
 80072d4:	4b08      	ldr	r3, [pc, #32]	; (80072f8 <HAL_PCD_MspInit+0xdc>)
 80072d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072e0:	2200      	movs	r2, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	2043      	movs	r0, #67	; 0x43
 80072e6:	f7f9 fbf2 	bl	8000ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072ea:	2043      	movs	r0, #67	; 0x43
 80072ec:	f7f9 fc0b 	bl	8000b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072f0:	bf00      	nop
 80072f2:	37b8      	adds	r7, #184	; 0xb8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40023800 	.word	0x40023800
 80072fc:	40020000 	.word	0x40020000

08007300 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007314:	4619      	mov	r1, r3
 8007316:	4610      	mov	r0, r2
 8007318:	f7fe faf9 	bl	800590e <USBD_LL_SetupStage>
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	4613      	mov	r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	440b      	add	r3, r1
 8007344:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	4619      	mov	r1, r3
 800734e:	f7fe fb33 	bl	80059b8 <USBD_LL_DataOutStage>
}
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	334c      	adds	r3, #76	; 0x4c
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	4619      	mov	r1, r3
 8007382:	f7fe fbcc 	bl	8005b1e <USBD_LL_DataInStage>
}
 8007386:	bf00      	nop
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b082      	sub	sp, #8
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800739c:	4618      	mov	r0, r3
 800739e:	f7fe fd00 	bl	8005da2 <USBD_LL_SOF>
}
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80073be:	2300      	movs	r3, #0
 80073c0:	73fb      	strb	r3, [r7, #15]
 80073c2:	e008      	b.n	80073d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d102      	bne.n	80073d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
 80073d0:	e001      	b.n	80073d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80073d2:	f7f9 f951 	bl	8000678 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80073dc:	7bfa      	ldrb	r2, [r7, #15]
 80073de:	4611      	mov	r1, r2
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fe fca0 	bl	8005d26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fe fc48 	bl	8005c82 <USBD_LL_Reset>
}
 80073f2:	bf00      	nop
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe fc9b 	bl	8005d46 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d005      	beq.n	800743c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007430:	4b04      	ldr	r3, [pc, #16]	; (8007444 <HAL_PCD_SuspendCallback+0x48>)
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	4a03      	ldr	r2, [pc, #12]	; (8007444 <HAL_PCD_SuspendCallback+0x48>)
 8007436:	f043 0306 	orr.w	r3, r3, #6
 800743a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	e000ed00 	.word	0xe000ed00

08007448 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fc8b 	bl	8005d72 <USBD_LL_Resume>
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007476:	78fa      	ldrb	r2, [r7, #3]
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe fce3 	bl	8005e46 <USBD_LL_IsoOUTIncomplete>
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800749a:	78fa      	ldrb	r2, [r7, #3]
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fc9f 	bl	8005de2 <USBD_LL_IsoINIncomplete>
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe fcf5 	bl	8005eaa <USBD_LL_DevConnected>
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fcf2 	bl	8005ec0 <USBD_LL_DevDisconnected>
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d13c      	bne.n	800756e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074f4:	4a20      	ldr	r2, [pc, #128]	; (8007578 <USBD_LL_Init+0x94>)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a1e      	ldr	r2, [pc, #120]	; (8007578 <USBD_LL_Init+0x94>)
 8007500:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007504:	4b1c      	ldr	r3, [pc, #112]	; (8007578 <USBD_LL_Init+0x94>)
 8007506:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800750a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800750c:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <USBD_LL_Init+0x94>)
 800750e:	2206      	movs	r2, #6
 8007510:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007512:	4b19      	ldr	r3, [pc, #100]	; (8007578 <USBD_LL_Init+0x94>)
 8007514:	2202      	movs	r2, #2
 8007516:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007518:	4b17      	ldr	r3, [pc, #92]	; (8007578 <USBD_LL_Init+0x94>)
 800751a:	2200      	movs	r2, #0
 800751c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800751e:	4b16      	ldr	r3, [pc, #88]	; (8007578 <USBD_LL_Init+0x94>)
 8007520:	2202      	movs	r2, #2
 8007522:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007524:	4b14      	ldr	r3, [pc, #80]	; (8007578 <USBD_LL_Init+0x94>)
 8007526:	2200      	movs	r2, #0
 8007528:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800752a:	4b13      	ldr	r3, [pc, #76]	; (8007578 <USBD_LL_Init+0x94>)
 800752c:	2200      	movs	r2, #0
 800752e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007530:	4b11      	ldr	r3, [pc, #68]	; (8007578 <USBD_LL_Init+0x94>)
 8007532:	2200      	movs	r2, #0
 8007534:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007536:	4b10      	ldr	r3, [pc, #64]	; (8007578 <USBD_LL_Init+0x94>)
 8007538:	2200      	movs	r2, #0
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800753c:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <USBD_LL_Init+0x94>)
 800753e:	2200      	movs	r2, #0
 8007540:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007542:	480d      	ldr	r0, [pc, #52]	; (8007578 <USBD_LL_Init+0x94>)
 8007544:	f7f9 fca6 	bl	8000e94 <HAL_PCD_Init>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800754e:	f7f9 f893 	bl	8000678 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007552:	2180      	movs	r1, #128	; 0x80
 8007554:	4808      	ldr	r0, [pc, #32]	; (8007578 <USBD_LL_Init+0x94>)
 8007556:	f7fa ff20 	bl	800239a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800755a:	2240      	movs	r2, #64	; 0x40
 800755c:	2100      	movs	r1, #0
 800755e:	4806      	ldr	r0, [pc, #24]	; (8007578 <USBD_LL_Init+0x94>)
 8007560:	f7fa fed4 	bl	800230c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007564:	2280      	movs	r2, #128	; 0x80
 8007566:	2101      	movs	r1, #1
 8007568:	4803      	ldr	r0, [pc, #12]	; (8007578 <USBD_LL_Init+0x94>)
 800756a:	f7fa fecf 	bl	800230c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20001650 	.word	0x20001650

0800757c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007592:	4618      	mov	r0, r3
 8007594:	f7f9 fda2 	bl	80010dc <HAL_PCD_Start>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f97e 	bl	80078a0 <USBD_Get_USB_Status>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	4608      	mov	r0, r1
 80075bc:	4611      	mov	r1, r2
 80075be:	461a      	mov	r2, r3
 80075c0:	4603      	mov	r3, r0
 80075c2:	70fb      	strb	r3, [r7, #3]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70bb      	strb	r3, [r7, #2]
 80075c8:	4613      	mov	r3, r2
 80075ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80075da:	78bb      	ldrb	r3, [r7, #2]
 80075dc:	883a      	ldrh	r2, [r7, #0]
 80075de:	78f9      	ldrb	r1, [r7, #3]
 80075e0:	f7fa fa8f 	bl	8001b02 <HAL_PCD_EP_Open>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f958 	bl	80078a0 <USBD_Get_USB_Status>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	4611      	mov	r1, r2
 800761c:	4618      	mov	r0, r3
 800761e:	f7fa fad8 	bl	8001bd2 <HAL_PCD_EP_Close>
 8007622:	4603      	mov	r3, r0
 8007624:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 f939 	bl	80078a0 <USBD_Get_USB_Status>
 800762e:	4603      	mov	r3, r0
 8007630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007632:	7bbb      	ldrb	r3, [r7, #14]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007656:	78fa      	ldrb	r2, [r7, #3]
 8007658:	4611      	mov	r1, r2
 800765a:	4618      	mov	r0, r3
 800765c:	f7fa fbb0 	bl	8001dc0 <HAL_PCD_EP_SetStall>
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f91a 	bl	80078a0 <USBD_Get_USB_Status>
 800766c:	4603      	mov	r3, r0
 800766e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007670:	7bbb      	ldrb	r3, [r7, #14]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007694:	78fa      	ldrb	r2, [r7, #3]
 8007696:	4611      	mov	r1, r2
 8007698:	4618      	mov	r0, r3
 800769a:	f7fa fbf5 	bl	8001e88 <HAL_PCD_EP_ClrStall>
 800769e:	4603      	mov	r3, r0
 80076a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 f8fb 	bl	80078a0 <USBD_Get_USB_Status>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80076cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da0b      	bge.n	80076ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076da:	68f9      	ldr	r1, [r7, #12]
 80076dc:	4613      	mov	r3, r2
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	333e      	adds	r3, #62	; 0x3e
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	e00b      	b.n	8007704 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076ec:	78fb      	ldrb	r3, [r7, #3]
 80076ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076f2:	68f9      	ldr	r1, [r7, #12]
 80076f4:	4613      	mov	r3, r2
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007702:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800772a:	78fa      	ldrb	r2, [r7, #3]
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f7fa f9c2 	bl	8001ab8 <HAL_PCD_SetAddress>
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 f8b0 	bl	80078a0 <USBD_Get_USB_Status>
 8007740:	4603      	mov	r3, r0
 8007742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007744:	7bbb      	ldrb	r3, [r7, #14]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b086      	sub	sp, #24
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]
 800775a:	460b      	mov	r3, r1
 800775c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800776c:	7af9      	ldrb	r1, [r7, #11]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	f7fa fadb 	bl	8001d2c <HAL_PCD_EP_Transmit>
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	4618      	mov	r0, r3
 800777e:	f000 f88f 	bl	80078a0 <USBD_Get_USB_Status>
 8007782:	4603      	mov	r3, r0
 8007784:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007786:	7dbb      	ldrb	r3, [r7, #22]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	607a      	str	r2, [r7, #4]
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	460b      	mov	r3, r1
 800779e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077ae:	7af9      	ldrb	r1, [r7, #11]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	f7fa fa57 	bl	8001c66 <HAL_PCD_EP_Receive>
 80077b8:	4603      	mov	r3, r0
 80077ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f86e 	bl	80078a0 <USBD_Get_USB_Status>
 80077c4:	4603      	mov	r3, r0
 80077c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077e4:	78fa      	ldrb	r2, [r7, #3]
 80077e6:	4611      	mov	r1, r2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fa fa87 	bl	8001cfc <HAL_PCD_EP_GetRxCount>
 80077ee:	4603      	mov	r3, r0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_PCDEx_LPM_Callback+0x18>
 800780a:	2b01      	cmp	r3, #1
 800780c:	d01f      	beq.n	800784e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800780e:	e03b      	b.n	8007888 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007818:	f000 f83c 	bl	8007894 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800781c:	4b1c      	ldr	r3, [pc, #112]	; (8007890 <HAL_PCDEx_LPM_Callback+0x98>)
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <HAL_PCDEx_LPM_Callback+0x98>)
 8007822:	f023 0306 	bic.w	r3, r3, #6
 8007826:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800783a:	f023 0301 	bic.w	r3, r3, #1
 800783e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fa93 	bl	8005d72 <USBD_LL_Resume>
    break;
 800784c:	e01c      	b.n	8007888 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6812      	ldr	r2, [r2, #0]
 800785c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007860:	f043 0301 	orr.w	r3, r3, #1
 8007864:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fa6a 	bl	8005d46 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <HAL_PCDEx_LPM_Callback+0x98>)
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	4a04      	ldr	r2, [pc, #16]	; (8007890 <HAL_PCDEx_LPM_Callback+0x98>)
 8007880:	f043 0306 	orr.w	r3, r3, #6
 8007884:	6113      	str	r3, [r2, #16]
    break;
 8007886:	bf00      	nop
}
 8007888:	bf00      	nop
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	e000ed00 	.word	0xe000ed00

08007894 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007898:	f7f8 fe5c 	bl	8000554 <SystemClock_Config>
}
 800789c:	bf00      	nop
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078ae:	79fb      	ldrb	r3, [r7, #7]
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d817      	bhi.n	80078e4 <USBD_Get_USB_Status+0x44>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <USBD_Get_USB_Status+0x1c>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078cd 	.word	0x080078cd
 80078c0:	080078d3 	.word	0x080078d3
 80078c4:	080078d9 	.word	0x080078d9
 80078c8:	080078df 	.word	0x080078df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
    break;
 80078d0:	e00b      	b.n	80078ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80078d2:	2303      	movs	r3, #3
 80078d4:	73fb      	strb	r3, [r7, #15]
    break;
 80078d6:	e008      	b.n	80078ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
    break;
 80078dc:	e005      	b.n	80078ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078de:	2303      	movs	r3, #3
 80078e0:	73fb      	strb	r3, [r7, #15]
    break;
 80078e2:	e002      	b.n	80078ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078e4:	2303      	movs	r3, #3
 80078e6:	73fb      	strb	r3, [r7, #15]
    break;
 80078e8:	bf00      	nop
  }
  return usb_status;
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <__errno>:
 80078f8:	4b01      	ldr	r3, [pc, #4]	; (8007900 <__errno+0x8>)
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	200000e8 	.word	0x200000e8

08007904 <__libc_init_array>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	4d0d      	ldr	r5, [pc, #52]	; (800793c <__libc_init_array+0x38>)
 8007908:	4c0d      	ldr	r4, [pc, #52]	; (8007940 <__libc_init_array+0x3c>)
 800790a:	1b64      	subs	r4, r4, r5
 800790c:	10a4      	asrs	r4, r4, #2
 800790e:	2600      	movs	r6, #0
 8007910:	42a6      	cmp	r6, r4
 8007912:	d109      	bne.n	8007928 <__libc_init_array+0x24>
 8007914:	4d0b      	ldr	r5, [pc, #44]	; (8007944 <__libc_init_array+0x40>)
 8007916:	4c0c      	ldr	r4, [pc, #48]	; (8007948 <__libc_init_array+0x44>)
 8007918:	f000 f92e 	bl	8007b78 <_init>
 800791c:	1b64      	subs	r4, r4, r5
 800791e:	10a4      	asrs	r4, r4, #2
 8007920:	2600      	movs	r6, #0
 8007922:	42a6      	cmp	r6, r4
 8007924:	d105      	bne.n	8007932 <__libc_init_array+0x2e>
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	f855 3b04 	ldr.w	r3, [r5], #4
 800792c:	4798      	blx	r3
 800792e:	3601      	adds	r6, #1
 8007930:	e7ee      	b.n	8007910 <__libc_init_array+0xc>
 8007932:	f855 3b04 	ldr.w	r3, [r5], #4
 8007936:	4798      	blx	r3
 8007938:	3601      	adds	r6, #1
 800793a:	e7f2      	b.n	8007922 <__libc_init_array+0x1e>
 800793c:	08007bec 	.word	0x08007bec
 8007940:	08007bec 	.word	0x08007bec
 8007944:	08007bec 	.word	0x08007bec
 8007948:	08007bf0 	.word	0x08007bf0

0800794c <malloc>:
 800794c:	4b02      	ldr	r3, [pc, #8]	; (8007958 <malloc+0xc>)
 800794e:	4601      	mov	r1, r0
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	f000 b87f 	b.w	8007a54 <_malloc_r>
 8007956:	bf00      	nop
 8007958:	200000e8 	.word	0x200000e8

0800795c <free>:
 800795c:	4b02      	ldr	r3, [pc, #8]	; (8007968 <free+0xc>)
 800795e:	4601      	mov	r1, r0
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	f000 b80b 	b.w	800797c <_free_r>
 8007966:	bf00      	nop
 8007968:	200000e8 	.word	0x200000e8

0800796c <memset>:
 800796c:	4402      	add	r2, r0
 800796e:	4603      	mov	r3, r0
 8007970:	4293      	cmp	r3, r2
 8007972:	d100      	bne.n	8007976 <memset+0xa>
 8007974:	4770      	bx	lr
 8007976:	f803 1b01 	strb.w	r1, [r3], #1
 800797a:	e7f9      	b.n	8007970 <memset+0x4>

0800797c <_free_r>:
 800797c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800797e:	2900      	cmp	r1, #0
 8007980:	d044      	beq.n	8007a0c <_free_r+0x90>
 8007982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007986:	9001      	str	r0, [sp, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f1a1 0404 	sub.w	r4, r1, #4
 800798e:	bfb8      	it	lt
 8007990:	18e4      	addlt	r4, r4, r3
 8007992:	f000 f8e3 	bl	8007b5c <__malloc_lock>
 8007996:	4a1e      	ldr	r2, [pc, #120]	; (8007a10 <_free_r+0x94>)
 8007998:	9801      	ldr	r0, [sp, #4]
 800799a:	6813      	ldr	r3, [r2, #0]
 800799c:	b933      	cbnz	r3, 80079ac <_free_r+0x30>
 800799e:	6063      	str	r3, [r4, #4]
 80079a0:	6014      	str	r4, [r2, #0]
 80079a2:	b003      	add	sp, #12
 80079a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079a8:	f000 b8de 	b.w	8007b68 <__malloc_unlock>
 80079ac:	42a3      	cmp	r3, r4
 80079ae:	d908      	bls.n	80079c2 <_free_r+0x46>
 80079b0:	6825      	ldr	r5, [r4, #0]
 80079b2:	1961      	adds	r1, r4, r5
 80079b4:	428b      	cmp	r3, r1
 80079b6:	bf01      	itttt	eq
 80079b8:	6819      	ldreq	r1, [r3, #0]
 80079ba:	685b      	ldreq	r3, [r3, #4]
 80079bc:	1949      	addeq	r1, r1, r5
 80079be:	6021      	streq	r1, [r4, #0]
 80079c0:	e7ed      	b.n	800799e <_free_r+0x22>
 80079c2:	461a      	mov	r2, r3
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	b10b      	cbz	r3, 80079cc <_free_r+0x50>
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	d9fa      	bls.n	80079c2 <_free_r+0x46>
 80079cc:	6811      	ldr	r1, [r2, #0]
 80079ce:	1855      	adds	r5, r2, r1
 80079d0:	42a5      	cmp	r5, r4
 80079d2:	d10b      	bne.n	80079ec <_free_r+0x70>
 80079d4:	6824      	ldr	r4, [r4, #0]
 80079d6:	4421      	add	r1, r4
 80079d8:	1854      	adds	r4, r2, r1
 80079da:	42a3      	cmp	r3, r4
 80079dc:	6011      	str	r1, [r2, #0]
 80079de:	d1e0      	bne.n	80079a2 <_free_r+0x26>
 80079e0:	681c      	ldr	r4, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	6053      	str	r3, [r2, #4]
 80079e6:	4421      	add	r1, r4
 80079e8:	6011      	str	r1, [r2, #0]
 80079ea:	e7da      	b.n	80079a2 <_free_r+0x26>
 80079ec:	d902      	bls.n	80079f4 <_free_r+0x78>
 80079ee:	230c      	movs	r3, #12
 80079f0:	6003      	str	r3, [r0, #0]
 80079f2:	e7d6      	b.n	80079a2 <_free_r+0x26>
 80079f4:	6825      	ldr	r5, [r4, #0]
 80079f6:	1961      	adds	r1, r4, r5
 80079f8:	428b      	cmp	r3, r1
 80079fa:	bf04      	itt	eq
 80079fc:	6819      	ldreq	r1, [r3, #0]
 80079fe:	685b      	ldreq	r3, [r3, #4]
 8007a00:	6063      	str	r3, [r4, #4]
 8007a02:	bf04      	itt	eq
 8007a04:	1949      	addeq	r1, r1, r5
 8007a06:	6021      	streq	r1, [r4, #0]
 8007a08:	6054      	str	r4, [r2, #4]
 8007a0a:	e7ca      	b.n	80079a2 <_free_r+0x26>
 8007a0c:	b003      	add	sp, #12
 8007a0e:	bd30      	pop	{r4, r5, pc}
 8007a10:	20001b58 	.word	0x20001b58

08007a14 <sbrk_aligned>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4e0e      	ldr	r6, [pc, #56]	; (8007a50 <sbrk_aligned+0x3c>)
 8007a18:	460c      	mov	r4, r1
 8007a1a:	6831      	ldr	r1, [r6, #0]
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	b911      	cbnz	r1, 8007a26 <sbrk_aligned+0x12>
 8007a20:	f000 f88c 	bl	8007b3c <_sbrk_r>
 8007a24:	6030      	str	r0, [r6, #0]
 8007a26:	4621      	mov	r1, r4
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f000 f887 	bl	8007b3c <_sbrk_r>
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	d00a      	beq.n	8007a48 <sbrk_aligned+0x34>
 8007a32:	1cc4      	adds	r4, r0, #3
 8007a34:	f024 0403 	bic.w	r4, r4, #3
 8007a38:	42a0      	cmp	r0, r4
 8007a3a:	d007      	beq.n	8007a4c <sbrk_aligned+0x38>
 8007a3c:	1a21      	subs	r1, r4, r0
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 f87c 	bl	8007b3c <_sbrk_r>
 8007a44:	3001      	adds	r0, #1
 8007a46:	d101      	bne.n	8007a4c <sbrk_aligned+0x38>
 8007a48:	f04f 34ff 	mov.w	r4, #4294967295
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	20001b5c 	.word	0x20001b5c

08007a54 <_malloc_r>:
 8007a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a58:	1ccd      	adds	r5, r1, #3
 8007a5a:	f025 0503 	bic.w	r5, r5, #3
 8007a5e:	3508      	adds	r5, #8
 8007a60:	2d0c      	cmp	r5, #12
 8007a62:	bf38      	it	cc
 8007a64:	250c      	movcc	r5, #12
 8007a66:	2d00      	cmp	r5, #0
 8007a68:	4607      	mov	r7, r0
 8007a6a:	db01      	blt.n	8007a70 <_malloc_r+0x1c>
 8007a6c:	42a9      	cmp	r1, r5
 8007a6e:	d905      	bls.n	8007a7c <_malloc_r+0x28>
 8007a70:	230c      	movs	r3, #12
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	2600      	movs	r6, #0
 8007a76:	4630      	mov	r0, r6
 8007a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a7c:	4e2e      	ldr	r6, [pc, #184]	; (8007b38 <_malloc_r+0xe4>)
 8007a7e:	f000 f86d 	bl	8007b5c <__malloc_lock>
 8007a82:	6833      	ldr	r3, [r6, #0]
 8007a84:	461c      	mov	r4, r3
 8007a86:	bb34      	cbnz	r4, 8007ad6 <_malloc_r+0x82>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	f7ff ffc2 	bl	8007a14 <sbrk_aligned>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	4604      	mov	r4, r0
 8007a94:	d14d      	bne.n	8007b32 <_malloc_r+0xde>
 8007a96:	6834      	ldr	r4, [r6, #0]
 8007a98:	4626      	mov	r6, r4
 8007a9a:	2e00      	cmp	r6, #0
 8007a9c:	d140      	bne.n	8007b20 <_malloc_r+0xcc>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	eb04 0803 	add.w	r8, r4, r3
 8007aa8:	f000 f848 	bl	8007b3c <_sbrk_r>
 8007aac:	4580      	cmp	r8, r0
 8007aae:	d13a      	bne.n	8007b26 <_malloc_r+0xd2>
 8007ab0:	6821      	ldr	r1, [r4, #0]
 8007ab2:	3503      	adds	r5, #3
 8007ab4:	1a6d      	subs	r5, r5, r1
 8007ab6:	f025 0503 	bic.w	r5, r5, #3
 8007aba:	3508      	adds	r5, #8
 8007abc:	2d0c      	cmp	r5, #12
 8007abe:	bf38      	it	cc
 8007ac0:	250c      	movcc	r5, #12
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	f7ff ffa5 	bl	8007a14 <sbrk_aligned>
 8007aca:	3001      	adds	r0, #1
 8007acc:	d02b      	beq.n	8007b26 <_malloc_r+0xd2>
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	442b      	add	r3, r5
 8007ad2:	6023      	str	r3, [r4, #0]
 8007ad4:	e00e      	b.n	8007af4 <_malloc_r+0xa0>
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	1b52      	subs	r2, r2, r5
 8007ada:	d41e      	bmi.n	8007b1a <_malloc_r+0xc6>
 8007adc:	2a0b      	cmp	r2, #11
 8007ade:	d916      	bls.n	8007b0e <_malloc_r+0xba>
 8007ae0:	1961      	adds	r1, r4, r5
 8007ae2:	42a3      	cmp	r3, r4
 8007ae4:	6025      	str	r5, [r4, #0]
 8007ae6:	bf18      	it	ne
 8007ae8:	6059      	strne	r1, [r3, #4]
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	bf08      	it	eq
 8007aee:	6031      	streq	r1, [r6, #0]
 8007af0:	5162      	str	r2, [r4, r5]
 8007af2:	604b      	str	r3, [r1, #4]
 8007af4:	4638      	mov	r0, r7
 8007af6:	f104 060b 	add.w	r6, r4, #11
 8007afa:	f000 f835 	bl	8007b68 <__malloc_unlock>
 8007afe:	f026 0607 	bic.w	r6, r6, #7
 8007b02:	1d23      	adds	r3, r4, #4
 8007b04:	1af2      	subs	r2, r6, r3
 8007b06:	d0b6      	beq.n	8007a76 <_malloc_r+0x22>
 8007b08:	1b9b      	subs	r3, r3, r6
 8007b0a:	50a3      	str	r3, [r4, r2]
 8007b0c:	e7b3      	b.n	8007a76 <_malloc_r+0x22>
 8007b0e:	6862      	ldr	r2, [r4, #4]
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	bf0c      	ite	eq
 8007b14:	6032      	streq	r2, [r6, #0]
 8007b16:	605a      	strne	r2, [r3, #4]
 8007b18:	e7ec      	b.n	8007af4 <_malloc_r+0xa0>
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	6864      	ldr	r4, [r4, #4]
 8007b1e:	e7b2      	b.n	8007a86 <_malloc_r+0x32>
 8007b20:	4634      	mov	r4, r6
 8007b22:	6876      	ldr	r6, [r6, #4]
 8007b24:	e7b9      	b.n	8007a9a <_malloc_r+0x46>
 8007b26:	230c      	movs	r3, #12
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	f000 f81c 	bl	8007b68 <__malloc_unlock>
 8007b30:	e7a1      	b.n	8007a76 <_malloc_r+0x22>
 8007b32:	6025      	str	r5, [r4, #0]
 8007b34:	e7de      	b.n	8007af4 <_malloc_r+0xa0>
 8007b36:	bf00      	nop
 8007b38:	20001b58 	.word	0x20001b58

08007b3c <_sbrk_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d06      	ldr	r5, [pc, #24]	; (8007b58 <_sbrk_r+0x1c>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	f7f8 fdf4 	bl	8000734 <_sbrk>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_sbrk_r+0x1a>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_sbrk_r+0x1a>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	20001b60 	.word	0x20001b60

08007b5c <__malloc_lock>:
 8007b5c:	4801      	ldr	r0, [pc, #4]	; (8007b64 <__malloc_lock+0x8>)
 8007b5e:	f000 b809 	b.w	8007b74 <__retarget_lock_acquire_recursive>
 8007b62:	bf00      	nop
 8007b64:	20001b64 	.word	0x20001b64

08007b68 <__malloc_unlock>:
 8007b68:	4801      	ldr	r0, [pc, #4]	; (8007b70 <__malloc_unlock+0x8>)
 8007b6a:	f000 b804 	b.w	8007b76 <__retarget_lock_release_recursive>
 8007b6e:	bf00      	nop
 8007b70:	20001b64 	.word	0x20001b64

08007b74 <__retarget_lock_acquire_recursive>:
 8007b74:	4770      	bx	lr

08007b76 <__retarget_lock_release_recursive>:
 8007b76:	4770      	bx	lr

08007b78 <_init>:
 8007b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7a:	bf00      	nop
 8007b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7e:	bc08      	pop	{r3}
 8007b80:	469e      	mov	lr, r3
 8007b82:	4770      	bx	lr

08007b84 <_fini>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	bf00      	nop
 8007b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	469e      	mov	lr, r3
 8007b8e:	4770      	bx	lr
